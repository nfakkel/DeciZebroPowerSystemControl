
pms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000163a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000016ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064f  00802000  00802000  000016ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008662  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003931  00000000  00000000  0000a122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002725  00000000  00000000  0000da53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b8  00000000  00000000  00010178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003bfb  00000000  00000000  00010a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000259a  00000000  00000000  0001462b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  00016bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_12>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_34>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_46>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ea e3       	ldi	r30, 0x3A	; 58
     210:	f6 e1       	ldi	r31, 0x16	; 22
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a0 30       	cpi	r26, 0x00	; 0
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	26 e2       	ldi	r18, 0x26	; 38
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	af 34       	cpi	r26, 0x4F	; 79
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 00 04 	call	0x800	; 0x800 <main>
     232:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <error_init>:
uint8_t error_counter = 0;
uint8_t last_error = 0;
uint32_t errors_array[ERROR_SIZE];

void error_init()
{
     23a:	ed e0       	ldi	r30, 0x0D	; 13
     23c:	f0 e2       	ldi	r31, 0x20	; 32
     23e:	89 e0       	ldi	r24, 0x09	; 9
     240:	94 e2       	ldi	r25, 0x24	; 36
	for (uint32_t i = 0;i < ERROR_SIZE;i++)
	{
		errors_array[i] = 0;
     242:	11 92       	st	Z+, r1
     244:	11 92       	st	Z+, r1
     246:	11 92       	st	Z+, r1
     248:	11 92       	st	Z+, r1
uint8_t last_error = 0;
uint32_t errors_array[ERROR_SIZE];

void error_init()
{
	for (uint32_t i = 0;i < ERROR_SIZE;i++)
     24a:	e8 17       	cp	r30, r24
     24c:	f9 07       	cpc	r31, r25
     24e:	c9 f7       	brne	.-14     	; 0x242 <error_init+0x8>
	{
		errors_array[i] = 0;
	}
}
     250:	08 95       	ret

00000252 <error_report>:


void error_report(uint8_t error)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
	 * BEGIN critical section
	 */
	//cli();

	/* check what errors where already reported */
	if(errors_array[error - 1] == 0){
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	01 97       	sbiw	r24, 0x01	; 1
     25a:	fc 01       	movw	r30, r24
     25c:	ee 0f       	add	r30, r30
     25e:	ff 1f       	adc	r31, r31
     260:	ee 0f       	add	r30, r30
     262:	ff 1f       	adc	r31, r31
     264:	e3 5f       	subi	r30, 0xF3	; 243
     266:	ff 4d       	sbci	r31, 0xDF	; 223
     268:	40 81       	ld	r20, Z
     26a:	51 81       	ldd	r21, Z+1	; 0x01
     26c:	62 81       	ldd	r22, Z+2	; 0x02
     26e:	73 81       	ldd	r23, Z+3	; 0x03
     270:	45 2b       	or	r20, r21
     272:	46 2b       	or	r20, r22
     274:	47 2b       	or	r20, r23
     276:	29 f4       	brne	.+10     	; 0x282 <error_report+0x30>
		error_counter++;
     278:	20 91 01 20 	lds	r18, 0x2001	; 0x802001 <error_counter>
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	20 93 01 20 	sts	0x2001, r18	; 0x802001 <error_counter>
	}
	errors_array[error - 1] = 1;
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	fc 01       	movw	r30, r24
     28c:	e3 5f       	subi	r30, 0xF3	; 243
     28e:	ff 4d       	sbci	r31, 0xDF	; 223
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	80 83       	st	Z, r24
     29a:	91 83       	std	Z+1, r25	; 0x01
     29c:	a2 83       	std	Z+2, r26	; 0x02
     29e:	b3 83       	std	Z+3, r27	; 0x03

	last_error = error;
     2a0:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_end>

	vregs_write(VREGS_ERROR_COUNTER, error_counter);
     2a4:	40 91 01 20 	lds	r20, 0x2001	; 0x802001 <error_counter>
     2a8:	63 e1       	ldi	r22, 0x13	; 19
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
	vregs_write(VREGS_LAST_ERROR, error);
     2b4:	4c 2f       	mov	r20, r28
     2b6:	64 e1       	ldi	r22, 0x14	; 20
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>

	//sei();
	/**
	 * END critical section
	 */
}
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <error_read>:

uint8_t error_read(uint8_t error)
{
	if(errors_array[error - 1] == 0){
     2c6:	24 e0       	ldi	r18, 0x04	; 4
     2c8:	82 9f       	mul	r24, r18
     2ca:	c0 01       	movw	r24, r0
     2cc:	11 24       	eor	r1, r1
     2ce:	fc 01       	movw	r30, r24
     2d0:	e7 5f       	subi	r30, 0xF7	; 247
     2d2:	ff 4d       	sbci	r31, 0xDF	; 223
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	40 81       	ld	r20, Z
     2d8:	51 81       	ldd	r21, Z+1	; 0x01
     2da:	62 81       	ldd	r22, Z+2	; 0x02
     2dc:	73 81       	ldd	r23, Z+3	; 0x03
     2de:	45 2b       	or	r20, r21
     2e0:	46 2b       	or	r20, r22
     2e2:	47 2b       	or	r20, r23
     2e4:	09 f4       	brne	.+2      	; 0x2e8 <error_read+0x22>
     2e6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 1;
	}
     2e8:	08 95       	ret

000002ea <determine_state>:
	
	shutdown state
*/
void determine_state()
{
	pms_state = pms_next_state;
     2ea:	80 91 09 24 	lds	r24, 0x2409	; 0x802409 <pms_next_state>
     2ee:	80 93 0a 24 	sts	0x240A, r24	; 0x80240a <pms_state>

	switch (pms_state)
     2f2:	83 30       	cpi	r24, 0x03	; 3
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <determine_state+0xe>
     2f6:	6f c0       	rjmp	.+222    	; 0x3d6 <determine_state+0xec>
     2f8:	28 f4       	brcc	.+10     	; 0x304 <determine_state+0x1a>
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	51 f0       	breq	.+20     	; 0x312 <determine_state+0x28>
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	c9 f1       	breq	.+114    	; 0x374 <determine_state+0x8a>
     302:	08 95       	ret
     304:	84 30       	cpi	r24, 0x04	; 4
     306:	09 f4       	brne	.+2      	; 0x30a <determine_state+0x20>
     308:	90 c0       	rjmp	.+288    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     30a:	8f 3f       	cpi	r24, 0xFF	; 255
     30c:	09 f4       	brne	.+2      	; 0x310 <determine_state+0x26>
     30e:	bd c0       	rjmp	.+378    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     310:	08 95       	ret
	{
		case PMS_START:
			//state leds 11
			io_led0_enable();
     312:	0e 94 0c 03 	call	0x618	; 0x618 <io_led0_enable>
			io_led1_enable();
     316:	0e 94 20 03 	call	0x640	; 0x640 <io_led1_enable>
			
			//no i/o enabled
			io_solar_disable();
     31a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <io_solar_disable>
			io_laptop_disable();
     31e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <io_laptop_disable>
			io_qi_disable();
     322:	0e 94 8f 02 	call	0x51e	; 0x51e <io_qi_disable>
			
			io_3v3_disable();
     326:	0e 94 a8 02 	call	0x550	; 0x550 <io_3v3_disable>
			io_5v_disable();
     32a:	0e 94 bc 02 	call	0x578	; 0x578 <io_5v_disable>
			io_16v_disable();
     32e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <io_16v_disable>
		   
		   	vregs_write(VREGS_QUICK_STATUS,PMS_START);
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	60 e1       	ldi	r22, 0x10	; 16
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			   	
			//transition conditions
			
			//default if nothing is wrong
			pms_next_state = PMS_DISCHARGE;
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if (bat_empty_flag) {pms_next_state = PMS_PV_CHARGE;}
     346:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <bat_empty_flag>
     34a:	88 23       	and	r24, r24
     34c:	19 f0       	breq	.+6      	; 0x354 <determine_state+0x6a>
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if(laptop_flag) {pms_next_state = PMS_CHARGE;}		
     354:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <laptop_flag>
     358:	88 23       	and	r24, r24
     35a:	19 f0       	breq	.+6      	; 0x362 <determine_state+0x78>
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
						
			if(critical_error) {pms_next_state = PMS_SHUTDOWN;}
     362:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <critical_error>
     366:	88 23       	and	r24, r24
     368:	09 f4       	brne	.+2      	; 0x36c <determine_state+0x82>
     36a:	a8 c0       	rjmp	.+336    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
     372:	08 95       	ret
		
		
		case PMS_CHARGE:
		    
			//state leds 10
			io_led0_enable();
     374:	0e 94 0c 03 	call	0x618	; 0x618 <io_led0_enable>
			io_led1_disable();
     378:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <io_led1_disable>
			
			//
			io_solar_enable();
     37c:	0e 94 34 03 	call	0x668	; 0x668 <io_solar_enable>
			io_qi_enable();
     380:	0e 94 59 03 	call	0x6b2	; 0x6b2 <io_qi_enable>
			io_laptop_enable();
     384:	0e 94 45 03 	call	0x68a	; 0x68a <io_laptop_enable>
			
			//outputs enabled
			io_3v3_enable();
     388:	0e 94 72 03 	call	0x6e4	; 0x6e4 <io_3v3_enable>
			io_5v_enable();
     38c:	0e 94 8e 03 	call	0x71c	; 0x71c <io_5v_enable>
			io_16v_enable();
     390:	0e 94 aa 03 	call	0x754	; 0x754 <io_16v_enable>
            
	
			vregs_write(VREGS_QUICK_STATUS,PMS_CHARGE);
     394:	42 e0       	ldi	r20, 0x02	; 2
     396:	60 e1       	ldi	r22, 0x10	; 16
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			
			pms_next_state = PMS_CHARGE;
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if(laptop_flag) {pms_next_state = PMS_DISCHARGE;}	
     3a8:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <laptop_flag>
     3ac:	88 23       	and	r24, r24
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <determine_state+0xcc>
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if (bat_empty_flag) {pms_next_state = PMS_PV_CHARGE;}
     3b6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <bat_empty_flag>
     3ba:	88 23       	and	r24, r24
     3bc:	19 f0       	breq	.+6      	; 0x3c4 <determine_state+0xda>
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
				
			if(critical_error) {pms_next_state = PMS_SHUTDOWN;}
     3c4:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <critical_error>
     3c8:	88 23       	and	r24, r24
     3ca:	09 f4       	brne	.+2      	; 0x3ce <determine_state+0xe4>
     3cc:	77 c0       	rjmp	.+238    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
     3d4:	08 95       	ret
		break;
		
		case PMS_PV_CHARGE:

			//state leds 10
			io_led0_enable();
     3d6:	0e 94 0c 03 	call	0x618	; 0x618 <io_led0_enable>
			io_led1_disable();
     3da:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <io_led1_disable>
		
			io_solar_enable();
     3de:	0e 94 34 03 	call	0x668	; 0x668 <io_solar_enable>
			io_laptop_disable();
     3e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <io_laptop_disable>
			io_qi_enable();
     3e6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <io_qi_enable>

			//Disable 16V bus
			io_3v3_enable();
     3ea:	0e 94 72 03 	call	0x6e4	; 0x6e4 <io_3v3_enable>
			io_5v_enable();
     3ee:	0e 94 8e 03 	call	0x71c	; 0x71c <io_5v_enable>
			io_16v_disable();	//disable unregulated bus (unless override is set by the zebro main control)	
     3f2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <io_16v_disable>
			
			vregs_write(VREGS_QUICK_STATUS,PMS_PV_CHARGE);
     3f6:	43 e0       	ldi	r20, 0x03	; 3
     3f8:	60 e1       	ldi	r22, 0x10	; 16
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
	
			pms_next_state = PMS_PV_CHARGE;
			
			//if enough power continue
			if(~laptop_flag) {pms_next_state = PMS_DISCHARGE;}
     404:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <laptop_flag>
     408:	94 e0       	ldi	r25, 0x04	; 4
     40a:	90 93 09 24 	sts	0x2409, r25	; 0x802409 <pms_next_state>
		
			if (laptop_flag) {pms_next_state = PMS_CHARGE;}
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
				
			if(critical_error) {pms_next_state = PMS_SHUTDOWN;}
     418:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <critical_error>
     41c:	88 23       	and	r24, r24
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	4d c0       	rjmp	.+154    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
     428:	08 95       	ret

		
		case PMS_DISCHARGE:

			//state leds 01
			io_led0_disable();
     42a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <io_led0_disable>
			io_led1_enable();
     42e:	0e 94 20 03 	call	0x640	; 0x640 <io_led1_enable>
			
			//input/output status
			io_solar_enable();
     432:	0e 94 34 03 	call	0x668	; 0x668 <io_solar_enable>
			io_laptop_disable();
     436:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <io_laptop_disable>
			io_qi_enable();
     43a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <io_qi_enable>

			io_3v3_enable();
     43e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <io_3v3_enable>
			io_5v_enable();
     442:	0e 94 8e 03 	call	0x71c	; 0x71c <io_5v_enable>
			io_16v_enable();
     446:	0e 94 aa 03 	call	0x754	; 0x754 <io_16v_enable>
			
			vregs_write(VREGS_QUICK_STATUS,PMS_DISCHARGE);
     44a:	44 e0       	ldi	r20, 0x04	; 4
     44c:	60 e1       	ldi	r22, 0x10	; 16
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
	
			pms_next_state = PMS_DISCHARGE;
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if (laptop_flag) {pms_next_state = PMS_CHARGE;}
     45e:	80 91 0b 20 	lds	r24, 0x200B	; 0x80200b <laptop_flag>
     462:	88 23       	and	r24, r24
     464:	19 f0       	breq	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
										
			if (bat_empty_flag) {pms_next_state = PMS_PV_CHARGE;}
     46c:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <bat_empty_flag>
     470:	88 23       	and	r24, r24
     472:	19 f0       	breq	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
			
			if(critical_error) {pms_next_state = PMS_SHUTDOWN;}
     47a:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <critical_error>
     47e:	88 23       	and	r24, r24
     480:	e9 f0       	breq	.+58     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	80 93 09 24 	sts	0x2409, r24	; 0x802409 <pms_next_state>
     488:	08 95       	ret
				
		break;	
		
		case PMS_SHUTDOWN:
			//raise_zebro_interrupt
			zebro_alert();
     48a:	0e 94 15 0b 	call	0x162a	; 0x162a <zebro_alert>
		
			//state leds 00
			io_led0_disable();
     48e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <io_led0_disable>
			io_led1_disable();
     492:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <io_led1_disable>
			
			//disable input/output 
			io_solar_disable();
     496:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <io_solar_disable>
			io_laptop_disable();
     49a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <io_laptop_disable>
			io_qi_disable();
     49e:	0e 94 8f 02 	call	0x51e	; 0x51e <io_qi_disable>
			io_3v3_disable();
     4a2:	0e 94 a8 02 	call	0x550	; 0x550 <io_3v3_disable>
			io_5v_disable();
     4a6:	0e 94 bc 02 	call	0x578	; 0x578 <io_5v_disable>
			io_16v_disable();
     4aa:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <io_16v_disable>

			vregs_write(VREGS_QUICK_STATUS,PMS_SHUTDOWN);
     4ae:	4f ef       	ldi	r20, 0xFF	; 255
     4b0:	60 e1       	ldi	r22, 0x10	; 16
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     4bc:	08 95       	ret

000004be <io_init>:
#include "pwm.h"

void io_init()
{
	//PORTR.DIRSET |= PIN0_bm | PIN1_bm; //Set the Led pins as output
	PORTD.DIRSET |= PIN0_bm | PIN1_bm | PIN2_bm | PIN5_bm; //Set  3.3V, 5V, 16V and QI enable pins as output
     4be:	e0 e6       	ldi	r30, 0x60	; 96
     4c0:	f6 e0       	ldi	r31, 0x06	; 6
     4c2:	81 81       	ldd	r24, Z+1	; 0x01
     4c4:	87 62       	ori	r24, 0x27	; 39
     4c6:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRSET |= PIN2_bm; //Set input_selec pin as output
     4c8:	e0 e2       	ldi	r30, 0x20	; 32
     4ca:	f6 e0       	ldi	r31, 0x06	; 6
     4cc:	81 81       	ldd	r24, Z+1	; 0x01
     4ce:	84 60       	ori	r24, 0x04	; 4
     4d0:	81 83       	std	Z+1, r24	; 0x01
     4d2:	08 95       	ret

000004d4 <io_solar_disable>:

}

void io_solar_disable()
{
	PWM_Disable();
     4d4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <PWM_Disable>
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     4d8:	60 e6       	ldi	r22, 0x60	; 96
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<7);
	vregs_write(VREGS_POWER_STATE, data);
     4e4:	48 2f       	mov	r20, r24
     4e6:	4f 77       	andi	r20, 0x7F	; 127
     4e8:	60 e6       	ldi	r22, 0x60	; 96
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     4f4:	08 95       	ret

000004f6 <io_laptop_disable>:
}

void io_laptop_disable()
{
	PORTB.OUTSET |= PIN2_bm;
     4f6:	e0 e2       	ldi	r30, 0x20	; 32
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	85 81       	ldd	r24, Z+5	; 0x05
     4fc:	84 60       	ori	r24, 0x04	; 4
     4fe:	85 83       	std	Z+5, r24	; 0x05
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     500:	60 e6       	ldi	r22, 0x60	; 96
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<6);
	vregs_write(VREGS_POWER_STATE, data);
     50c:	48 2f       	mov	r20, r24
     50e:	4f 7b       	andi	r20, 0xBF	; 191
     510:	60 e6       	ldi	r22, 0x60	; 96
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     51c:	08 95       	ret

0000051e <io_qi_disable>:
}

void io_qi_disable()
{
	PORTB.OUTCLR |= PIN2_bm;
     51e:	e0 e2       	ldi	r30, 0x20	; 32
     520:	f6 e0       	ldi	r31, 0x06	; 6
     522:	86 81       	ldd	r24, Z+6	; 0x06
     524:	84 60       	ori	r24, 0x04	; 4
     526:	86 83       	std	Z+6, r24	; 0x06
	PORTD.OUTCLR |= PIN5_bm;
     528:	e0 e6       	ldi	r30, 0x60	; 96
     52a:	f6 e0       	ldi	r31, 0x06	; 6
     52c:	86 81       	ldd	r24, Z+6	; 0x06
     52e:	80 62       	ori	r24, 0x20	; 32
     530:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     532:	60 e6       	ldi	r22, 0x60	; 96
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<5);
	vregs_write(VREGS_POWER_STATE, data);
     53e:	48 2f       	mov	r20, r24
     540:	4f 7d       	andi	r20, 0xDF	; 223
     542:	60 e6       	ldi	r22, 0x60	; 96
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     54e:	08 95       	ret

00000550 <io_3v3_disable>:
}

void io_3v3_disable()
{
	PORTD.OUTCLR |= PIN0_bm;
     550:	e0 e6       	ldi	r30, 0x60	; 96
     552:	f6 e0       	ldi	r31, 0x06	; 6
     554:	86 81       	ldd	r24, Z+6	; 0x06
     556:	81 60       	ori	r24, 0x01	; 1
     558:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     55a:	60 e6       	ldi	r22, 0x60	; 96
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<4);
	vregs_write(VREGS_POWER_STATE, data);
     566:	48 2f       	mov	r20, r24
     568:	4f 7e       	andi	r20, 0xEF	; 239
     56a:	60 e6       	ldi	r22, 0x60	; 96
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     576:	08 95       	ret

00000578 <io_5v_disable>:
}

void io_5v_disable()
{
	PORTD.OUTCLR |= PIN1_bm;
     578:	e0 e6       	ldi	r30, 0x60	; 96
     57a:	f6 e0       	ldi	r31, 0x06	; 6
     57c:	86 81       	ldd	r24, Z+6	; 0x06
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     582:	60 e6       	ldi	r22, 0x60	; 96
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<3);
	vregs_write(VREGS_POWER_STATE, data);
     58e:	48 2f       	mov	r20, r24
     590:	47 7f       	andi	r20, 0xF7	; 247
     592:	60 e6       	ldi	r22, 0x60	; 96
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     59e:	08 95       	ret

000005a0 <io_16v_disable>:
}

void io_16v_disable()
{
	PORTD.OUTCLR |= PIN2_bm;
     5a0:	e0 e6       	ldi	r30, 0x60	; 96
     5a2:	f6 e0       	ldi	r31, 0x06	; 6
     5a4:	86 81       	ldd	r24, Z+6	; 0x06
     5a6:	84 60       	ori	r24, 0x04	; 4
     5a8:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     5aa:	60 e6       	ldi	r22, 0x60	; 96
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<2);
	vregs_write(VREGS_POWER_STATE, data);
     5b6:	48 2f       	mov	r20, r24
     5b8:	4b 7f       	andi	r20, 0xFB	; 251
     5ba:	60 e6       	ldi	r22, 0x60	; 96
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     5c6:	08 95       	ret

000005c8 <io_led1_disable>:
}

void io_led1_disable()
{
	PORTR.OUTCLR |= PIN1_bm;
     5c8:	e0 ee       	ldi	r30, 0xE0	; 224
     5ca:	f7 e0       	ldi	r31, 0x07	; 7
     5cc:	86 81       	ldd	r24, Z+6	; 0x06
     5ce:	82 60       	ori	r24, 0x02	; 2
     5d0:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     5d2:	60 e6       	ldi	r22, 0x60	; 96
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<1);
	vregs_write(VREGS_POWER_STATE, data);
     5de:	48 2f       	mov	r20, r24
     5e0:	4d 7f       	andi	r20, 0xFD	; 253
     5e2:	60 e6       	ldi	r22, 0x60	; 96
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     5ee:	08 95       	ret

000005f0 <io_led0_disable>:
}

void io_led0_disable()
{
	PORTR.OUTCLR |= PIN0_bm;
     5f0:	e0 ee       	ldi	r30, 0xE0	; 224
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	86 81       	ldd	r24, Z+6	; 0x06
     5f6:	81 60       	ori	r24, 0x01	; 1
     5f8:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     5fa:	60 e6       	ldi	r22, 0x60	; 96
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data &= ~(1<<0);
	vregs_write(VREGS_POWER_STATE, data);
     606:	48 2f       	mov	r20, r24
     608:	4e 7f       	andi	r20, 0xFE	; 254
     60a:	60 e6       	ldi	r22, 0x60	; 96
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     616:	08 95       	ret

00000618 <io_led0_enable>:
}

void io_led0_enable()
{
	PORTR.OUTSET |= PIN0_bm;
     618:	e0 ee       	ldi	r30, 0xE0	; 224
     61a:	f7 e0       	ldi	r31, 0x07	; 7
     61c:	85 81       	ldd	r24, Z+5	; 0x05
     61e:	81 60       	ori	r24, 0x01	; 1
     620:	85 83       	std	Z+5, r24	; 0x05
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     622:	60 e6       	ldi	r22, 0x60	; 96
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data |= (1<<0);
	vregs_write(VREGS_POWER_STATE, data);
     62e:	48 2f       	mov	r20, r24
     630:	41 60       	ori	r20, 0x01	; 1
     632:	60 e6       	ldi	r22, 0x60	; 96
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     63e:	08 95       	ret

00000640 <io_led1_enable>:
}

void io_led1_enable()
{
	PORTR.OUTSET |= PIN1_bm;
     640:	e0 ee       	ldi	r30, 0xE0	; 224
     642:	f7 e0       	ldi	r31, 0x07	; 7
     644:	85 81       	ldd	r24, Z+5	; 0x05
     646:	82 60       	ori	r24, 0x02	; 2
     648:	85 83       	std	Z+5, r24	; 0x05
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     64a:	60 e6       	ldi	r22, 0x60	; 96
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data |= (1<<1);
	vregs_write(VREGS_POWER_STATE, data);
     656:	48 2f       	mov	r20, r24
     658:	42 60       	ori	r20, 0x02	; 2
     65a:	60 e6       	ldi	r22, 0x60	; 96
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     666:	08 95       	ret

00000668 <io_solar_enable>:
}

void io_solar_enable()
{
	PWM_Enable();
     668:	0e 94 5d 05 	call	0xaba	; 0xaba <PWM_Enable>
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     66c:	60 e6       	ldi	r22, 0x60	; 96
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data |= (1<<7);
	vregs_write(VREGS_POWER_STATE, data);	
     678:	48 2f       	mov	r20, r24
     67a:	40 68       	ori	r20, 0x80	; 128
     67c:	60 e6       	ldi	r22, 0x60	; 96
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     688:	08 95       	ret

0000068a <io_laptop_enable>:
}

void io_laptop_enable()
{
	PORTB.OUTCLR |= PIN2_bm;
     68a:	e0 e2       	ldi	r30, 0x20	; 32
     68c:	f6 e0       	ldi	r31, 0x06	; 6
     68e:	86 81       	ldd	r24, Z+6	; 0x06
     690:	84 60       	ori	r24, 0x04	; 4
     692:	86 83       	std	Z+6, r24	; 0x06
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     694:	60 e6       	ldi	r22, 0x60	; 96
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data |= (1<<6);
	vregs_write(VREGS_POWER_STATE, data);
     6a0:	48 2f       	mov	r20, r24
     6a2:	40 64       	ori	r20, 0x40	; 64
     6a4:	60 e6       	ldi	r22, 0x60	; 96
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     6b0:	08 95       	ret

000006b2 <io_qi_enable>:
}

void io_qi_enable()
{
	PORTB.OUTSET |= PIN2_bm;
     6b2:	e0 e2       	ldi	r30, 0x20	; 32
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	85 81       	ldd	r24, Z+5	; 0x05
     6b8:	84 60       	ori	r24, 0x04	; 4
     6ba:	85 83       	std	Z+5, r24	; 0x05
	PORTD.OUTSET |= PIN5_bm;
     6bc:	e0 e6       	ldi	r30, 0x60	; 96
     6be:	f6 e0       	ldi	r31, 0x06	; 6
     6c0:	85 81       	ldd	r24, Z+5	; 0x05
     6c2:	80 62       	ori	r24, 0x20	; 32
     6c4:	85 83       	std	Z+5, r24	; 0x05
	uint8_t data = vregs_read(VREGS_POWER_STATE);
     6c6:	60 e6       	ldi	r22, 0x60	; 96
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
	data |= (1<<5);
	vregs_write(VREGS_POWER_STATE, data);
     6d2:	48 2f       	mov	r20, r24
     6d4:	40 62       	ori	r20, 0x20	; 32
     6d6:	60 e6       	ldi	r22, 0x60	; 96
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     6e2:	08 95       	ret

000006e4 <io_3v3_enable>:
}

void io_3v3_enable()
{
	if (error_read(ERROR_3V3_FUSE))
     6e4:	83 e1       	ldi	r24, 0x13	; 19
     6e6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <error_read>
     6ea:	88 23       	and	r24, r24
     6ec:	19 f0       	breq	.+6      	; 0x6f4 <io_3v3_enable+0x10>
	{
		io_3v3_disable();
     6ee:	0e 94 a8 02 	call	0x550	; 0x550 <io_3v3_disable>
     6f2:	08 95       	ret
	}
	else
	{
		PORTD.OUTSET |= PIN0_bm;
     6f4:	e0 e6       	ldi	r30, 0x60	; 96
     6f6:	f6 e0       	ldi	r31, 0x06	; 6
     6f8:	85 81       	ldd	r24, Z+5	; 0x05
     6fa:	81 60       	ori	r24, 0x01	; 1
     6fc:	85 83       	std	Z+5, r24	; 0x05
		uint8_t data = vregs_read(VREGS_POWER_STATE);
     6fe:	60 e6       	ldi	r22, 0x60	; 96
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
		data |= (1<<4);
		vregs_write(VREGS_POWER_STATE, data);
     70a:	48 2f       	mov	r20, r24
     70c:	40 61       	ori	r20, 0x10	; 16
     70e:	60 e6       	ldi	r22, 0x60	; 96
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     71a:	08 95       	ret

0000071c <io_5v_enable>:
	}
}

void io_5v_enable()
{
	if (error_read(ERROR_5V_FUSE))
     71c:	84 e1       	ldi	r24, 0x14	; 20
     71e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <error_read>
     722:	88 23       	and	r24, r24
     724:	19 f0       	breq	.+6      	; 0x72c <io_5v_enable+0x10>
	{
		io_5v_disable();
     726:	0e 94 bc 02 	call	0x578	; 0x578 <io_5v_disable>
     72a:	08 95       	ret
	}
	else
	{
		PORTD.OUTSET |= PIN1_bm;
     72c:	e0 e6       	ldi	r30, 0x60	; 96
     72e:	f6 e0       	ldi	r31, 0x06	; 6
     730:	85 81       	ldd	r24, Z+5	; 0x05
     732:	82 60       	ori	r24, 0x02	; 2
     734:	85 83       	std	Z+5, r24	; 0x05
		uint8_t data = vregs_read(VREGS_POWER_STATE);
     736:	60 e6       	ldi	r22, 0x60	; 96
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
		data |= (1<<3);
		vregs_write(VREGS_POWER_STATE, data);
     742:	48 2f       	mov	r20, r24
     744:	48 60       	ori	r20, 0x08	; 8
     746:	60 e6       	ldi	r22, 0x60	; 96
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     752:	08 95       	ret

00000754 <io_16v_enable>:
	}
}

void io_16v_enable()
{
	if (error_read(ERROR_3V3_FUSE))
     754:	83 e1       	ldi	r24, 0x13	; 19
     756:	0e 94 63 01 	call	0x2c6	; 0x2c6 <error_read>
     75a:	88 23       	and	r24, r24
     75c:	19 f0       	breq	.+6      	; 0x764 <io_16v_enable+0x10>
	{
		io_16v_disable();
     75e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <io_16v_disable>
     762:	08 95       	ret
	}
	else
	{
		PORTD.OUTSET |= PIN2_bm;
     764:	e0 e6       	ldi	r30, 0x60	; 96
     766:	f6 e0       	ldi	r31, 0x06	; 6
     768:	85 81       	ldd	r24, Z+5	; 0x05
     76a:	84 60       	ori	r24, 0x04	; 4
     76c:	85 83       	std	Z+5, r24	; 0x05
		uint8_t data = vregs_read(VREGS_POWER_STATE);
     76e:	60 e6       	ldi	r22, 0x60	; 96
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <vregs_read>
		data |= (1<<2);
		vregs_write(VREGS_POWER_STATE, data);
     77a:	48 2f       	mov	r20, r24
     77c:	44 60       	ori	r20, 0x04	; 4
     77e:	60 e6       	ldi	r22, 0x60	; 96
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
     78a:	08 95       	ret

0000078c <TWIC_SlaveProcessData>:
int8_t offset;
int8_t count = 0;
uint16_t power = 0;

void TWIC_SlaveProcessData(void)
{
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29

	
	uint8_t bufIndex = twiSlave.receivedData[0];
     796:	0f 2e       	mov	r0, r31
     798:	fe e0       	ldi	r31, 0x0E	; 14
     79a:	ef 2e       	mov	r14, r31
     79c:	f4 e2       	ldi	r31, 0x24	; 36
     79e:	ff 2e       	mov	r15, r31
     7a0:	f0 2d       	mov	r31, r0
     7a2:	f7 01       	movw	r30, r14
     7a4:	d4 81       	ldd	r29, Z+4	; 0x04
	uint8_t bufSize = twiSlave.bytesReceived;
     7a6:	14 89       	ldd	r17, Z+20	; 0x14
	twiSlave.sendData[0] = vregs_read_buffer(bufIndex); //send the read data from register
     7a8:	6d 2f       	mov	r22, r29
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 80 0a 	call	0x1500	; 0x1500 <vregs_read_buffer>
     7b4:	f7 01       	movw	r30, r14
     7b6:	84 87       	std	Z+12, r24	; 0x0c
	twiSlave.sendData[1] = vregs_read_buffer(bufIndex+1);//send the read data from register+1 if word is requested
     7b8:	6d 2f       	mov	r22, r29
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	6f 5f       	subi	r22, 0xFF	; 255
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	07 2e       	mov	r0, r23
     7c2:	00 0c       	add	r0, r0
     7c4:	88 0b       	sbc	r24, r24
     7c6:	99 0b       	sbc	r25, r25
     7c8:	0e 94 80 0a 	call	0x1500	; 0x1500 <vregs_read_buffer>
     7cc:	f7 01       	movw	r30, r14
     7ce:	85 87       	std	Z+13, r24	; 0x0d
	/*Suggestion for ZebroBus protocol to read all registers*/
	//for (uint8_t i=0;(bufIndex+i)<VREGS_FILE_TOTAL_SIZE;i++)
	//{	
	//	twiSlave.sendData[i] = rw_reg[bufIndex+i];
	//}
	for (uint8_t recvIndex = 0; recvIndex<bufSize; bufIndex++)
     7d0:	11 23       	and	r17, r17
     7d2:	81 f0       	breq	.+32     	; 0x7f4 <TWIC_SlaveProcessData+0x68>
     7d4:	c0 e0       	ldi	r28, 0x00	; 0
     7d6:	6d 2f       	mov	r22, r29
     7d8:	6c 0f       	add	r22, r28
	{
		recvIndex++;
     7da:	cf 5f       	subi	r28, 0xFF	; 255
		vregs_write(bufIndex, twiSlave.receivedData[recvIndex]);
     7dc:	ec 2f       	mov	r30, r28
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	e2 5f       	subi	r30, 0xF2	; 242
     7e2:	fb 4d       	sbci	r31, 0xDB	; 219
     7e4:	44 81       	ldd	r20, Z+4	; 0x04
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
	/*Suggestion for ZebroBus protocol to read all registers*/
	//for (uint8_t i=0;(bufIndex+i)<VREGS_FILE_TOTAL_SIZE;i++)
	//{	
	//	twiSlave.sendData[i] = rw_reg[bufIndex+i];
	//}
	for (uint8_t recvIndex = 0; recvIndex<bufSize; bufIndex++)
     7f0:	1c 13       	cpse	r17, r28
     7f2:	f1 cf       	rjmp	.-30     	; 0x7d6 <TWIC_SlaveProcessData+0x4a>
	{
		recvIndex++;
		vregs_write(bufIndex, twiSlave.receivedData[recvIndex]);
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <main>:

int main(void)
{
	//initialize clock
	CCP = CCP_IOREG_gc;
     800:	88 ed       	ldi	r24, 0xD8	; 216
     802:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     80a:	e0 e5       	ldi	r30, 0x50	; 80
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	81 81       	ldd	r24, Z+1	; 0x01
     810:	81 ff       	sbrs	r24, 1
     812:	fd cf       	rjmp	.-6      	; 0x80e <main+0xe>
	CCP = CCP_IOREG_gc;
     814:	88 ed       	ldi	r24, 0xD8	; 216
     816:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     818:	c1 e0       	ldi	r28, 0x01	; 1
     81a:	c0 93 40 00 	sts	0x0040, r28	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
		
	//booting leds
	PORTR.DIRSET |= PIN0_bm | PIN1_bm;
     81e:	e0 ee       	ldi	r30, 0xE0	; 224
     820:	f7 e0       	ldi	r31, 0x07	; 7
     822:	81 81       	ldd	r24, Z+1	; 0x01
     824:	83 60       	ori	r24, 0x03	; 3
     826:	81 83       	std	Z+1, r24	; 0x01
	
	PORTR.OUTSET |= PIN0_bm | PIN1_bm;
     828:	85 81       	ldd	r24, Z+5	; 0x05
     82a:	83 60       	ori	r24, 0x03	; 3
     82c:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82e:	2f ef       	ldi	r18, 0xFF	; 255
     830:	83 ec       	ldi	r24, 0xC3	; 195
     832:	99 e0       	ldi	r25, 0x09	; 9
     834:	21 50       	subi	r18, 0x01	; 1
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <main+0x34>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x3e>
     83e:	00 00       	nop
	_delay_ms(100);       
	PORTR.OUTCLR |= PIN0_bm | PIN1_bm;
     840:	86 81       	ldd	r24, Z+6	; 0x06
     842:	83 60       	ori	r24, 0x03	; 3
     844:	86 83       	std	Z+6, r24	; 0x06
     846:	2f ef       	ldi	r18, 0xFF	; 255
     848:	83 ec       	ldi	r24, 0xC3	; 195
     84a:	99 e0       	ldi	r25, 0x09	; 9
     84c:	21 50       	subi	r18, 0x01	; 1
     84e:	80 40       	sbci	r24, 0x00	; 0
     850:	90 40       	sbci	r25, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <main+0x4c>
     854:	00 c0       	rjmp	.+0      	; 0x856 <main+0x56>
     856:	00 00       	nop
	_delay_ms(100);
	PORTR.OUTSET |= PIN0_bm | PIN1_bm;
     858:	85 81       	ldd	r24, Z+5	; 0x05
     85a:	83 60       	ori	r24, 0x03	; 3
     85c:	85 83       	std	Z+5, r24	; 0x05
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	83 ec       	ldi	r24, 0xC3	; 195
     862:	99 e0       	ldi	r25, 0x09	; 9
     864:	21 50       	subi	r18, 0x01	; 1
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <main+0x64>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <main+0x6e>
     86e:	00 00       	nop
	_delay_ms(100);
	PORTR.OUTCLR |= PIN0_bm | PIN1_bm;
     870:	86 81       	ldd	r24, Z+6	; 0x06
     872:	83 60       	ori	r24, 0x03	; 3
     874:	86 83       	std	Z+6, r24	; 0x06
     876:	2f ef       	ldi	r18, 0xFF	; 255
     878:	83 ec       	ldi	r24, 0xC3	; 195
     87a:	99 e0       	ldi	r25, 0x09	; 9
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	80 40       	sbci	r24, 0x00	; 0
     880:	90 40       	sbci	r25, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <main+0x7c>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x86>
     886:	00 00       	nop
	_delay_ms(100);
	
	// init isr bus
	    // External interrupt 0 on PB0, enable pullup, sense rising edge
	    PORTB.PIN0CTRL = PORT_OPC_PULLDOWN_gc | PORT_ISC_LEVEL_gc;
     888:	e0 e2       	ldi	r30, 0x20	; 32
     88a:	f6 e0       	ldi	r31, 0x06	; 6
     88c:	83 e1       	ldi	r24, 0x13	; 19
     88e:	80 8b       	std	Z+16, r24	; 0x10
	    PORTB.INT0MASK = PIN0_bm;
     890:	c2 87       	std	Z+10, r28	; 0x0a
	    PORTB.INTCTRL = PORT_INT0LVL_HI_gc;
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	81 87       	std	Z+9, r24	; 0x09
	
	/* Initialize TWI slave. */
	TWI_SlaveInitializeDriver(&twiSlave, &TWIC, TWIC_SlaveProcessData);
     896:	46 ec       	ldi	r20, 0xC6	; 198
     898:	53 e0       	ldi	r21, 0x03	; 3
     89a:	60 e8       	ldi	r22, 0x80	; 128
     89c:	74 e0       	ldi	r23, 0x04	; 4
     89e:	8e e0       	ldi	r24, 0x0E	; 14
     8a0:	94 e2       	ldi	r25, 0x24	; 36
     8a2:	0e 94 6f 09 	call	0x12de	; 0x12de <TWI_SlaveInitializeDriver>
	TWI_SlaveInitializeModule(&twiSlave,0x60,TWI_SLAVE_INTLVL_LO_gc);
     8a6:	40 e4       	ldi	r20, 0x40	; 64
     8a8:	60 e6       	ldi	r22, 0x60	; 96
     8aa:	8e e0       	ldi	r24, 0x0E	; 14
     8ac:	94 e2       	ldi	r25, 0x24	; 36
     8ae:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <TWI_SlaveInitializeModule>

	//enable interrupts
	PMIC.CTRL |= PMIC_HILVLEN_bm;
     8b2:	e0 ea       	ldi	r30, 0xA0	; 160
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	84 60       	ori	r24, 0x04	; 4
     8ba:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
     8bc:	82 81       	ldd	r24, Z+2	; 0x02
     8be:	81 60       	ori	r24, 0x01	; 1
     8c0:	82 83       	std	Z+2, r24	; 0x02
	sei();
     8c2:	78 94       	sei
	
	//initialize all functions
	sensor_init();
     8c4:	0e 94 96 05 	call	0xb2c	; 0xb2c <sensor_init>
	io_init();
     8c8:	0e 94 5f 02 	call	0x4be	; 0x4be <io_init>
	vregs_init();
     8cc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <vregs_init>
	error_init();
     8d0:	0e 94 1d 01 	call	0x23a	; 0x23a <error_init>
	zebro_alert_init();
     8d4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <zebro_alert_init>
	mppt_init();
     8d8:	0e 94 1c 05 	call	0xa38	; 0xa38 <mppt_init>
	watchdog_init();
     8dc:	0e 94 03 0b 	call	0x1606	; 0x1606 <watchdog_init>
	PWM_Enable();
     8e0:	0e 94 5d 05 	call	0xaba	; 0xaba <PWM_Enable>
	
	//set start state
	pms_next_state = PMS_START;
     8e4:	c0 93 09 24 	sts	0x2409, r28	; 0x802409 <pms_next_state>
	
	//configure sensors
	current_init();
     8e8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <current_init>
     8ec:	2f ef       	ldi	r18, 0xFF	; 255
     8ee:	83 ed       	ldi	r24, 0xD3	; 211
     8f0:	90 e3       	ldi	r25, 0x30	; 48
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	80 40       	sbci	r24, 0x00	; 0
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e1 f7       	brne	.-8      	; 0x8f2 <main+0xf2>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <main+0xfc>
     8fc:	00 00       	nop
	
	//enter main loop
	while (1)
	{
		//check all the sensors
		Read_Current_Registers();
     8fe:	0e 94 26 07 	call	0xe4c	; 0xe4c <Read_Current_Registers>
		Read_Qi_Registers();
     902:	0e 94 c2 07 	call	0xf84	; 0xf84 <Read_Qi_Registers>
		Read_Temperature_Registers();
     906:	0e 94 4a 08 	call	0x1094	; 0x1094 <Read_Temperature_Registers>
		//_delay_ms(20);
	    //check rheostat setting for debug purposes
	    //read_Rheostat();
	  
		//adjust solar dutycycle
		power = vregs_read_buffer(VREGS_SOLAR_CURRENT_LOW) * vregs_read_buffer(VREGS_SOLAR_VOLTAGE_LOW);
     90a:	60 e2       	ldi	r22, 0x20	; 32
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 80 0a 	call	0x1500	; 0x1500 <vregs_read_buffer>
     916:	c8 2f       	mov	r28, r24
     918:	6a e2       	ldi	r22, 0x2A	; 42
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 80 0a 	call	0x1500	; 0x1500 <vregs_read_buffer>
     924:	c8 9f       	mul	r28, r24
     926:	c0 01       	movw	r24, r0
     928:	11 24       	eor	r1, r1
     92a:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <power>
     92e:	90 93 03 20 	sts	0x2003, r25	; 0x802003 <power+0x1>
		mppt(power);
     932:	0e 94 21 05 	call	0xa42	; 0xa42 <mppt>
	
		//reset watchdog (needs verifcation)
		asm("wdr");
     936:	a8 95       	wdr
		
		//run power scheme
		determine_state();
     938:	0e 94 75 01 	call	0x2ea	; 0x2ea <determine_state>

		//increment loop counter
		count = count+1;
     93c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <count>
     940:	4f 5f       	subi	r20, 0xFF	; 255
     942:	40 93 04 20 	sts	0x2004, r20	; 0x802004 <count>
		if(count == 255){count=0;}
		vregs_write(VREGS_LOOP_COUNTER,count);
     946:	62 e1       	ldi	r22, 0x12	; 18
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		
		//update ZebroBus data
		vregs_writeout();
     952:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vregs_writeout>
     956:	d3 cf       	rjmp	.-90     	; 0x8fe <main+0xfe>

00000958 <__vector_46>:
	}
}

ISR(TWIE_TWIM_vect)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	TWI_MasterInterruptHandler(&twiMaster);
     97a:	8c e2       	ldi	r24, 0x2C	; 44
     97c:	94 e2       	ldi	r25, 0x24	; 36
     97e:	0e 94 56 09 	call	0x12ac	; 0x12ac <TWI_MasterInterruptHandler>
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <__vector_12>:

/*! TWIC Slave Interrupt vector. */
ISR(TWIC_TWIS_vect)
{
     9a4:	1f 92       	push	r1
     9a6:	0f 92       	push	r0
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	0f 92       	push	r0
     9ac:	11 24       	eor	r1, r1
     9ae:	2f 93       	push	r18
     9b0:	3f 93       	push	r19
     9b2:	4f 93       	push	r20
     9b4:	5f 93       	push	r21
     9b6:	6f 93       	push	r22
     9b8:	7f 93       	push	r23
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31
	TWI_SlaveInterruptHandler(&twiSlave);
     9c6:	8e e0       	ldi	r24, 0x0E	; 14
     9c8:	94 e2       	ldi	r25, 0x24	; 36
     9ca:	0e 94 31 0a 	call	0x1462	; 0x1462 <TWI_SlaveInterruptHandler>
}
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_34>:


ISR(PORTB_INT0_vect)
{
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	// Toggle ZebroAlert on interrupt
	zebro_alert();
     a12:	0e 94 15 0b 	call	0x162a	; 0x162a <zebro_alert>
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	bf 91       	pop	r27
     a1c:	af 91       	pop	r26
     a1e:	9f 91       	pop	r25
     a20:	8f 91       	pop	r24
     a22:	7f 91       	pop	r23
     a24:	6f 91       	pop	r22
     a26:	5f 91       	pop	r21
     a28:	4f 91       	pop	r20
     a2a:	3f 91       	pop	r19
     a2c:	2f 91       	pop	r18
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <mppt_init>:
#include "pwm.h"
# include "mppt.h"

void mppt_init(void)
{
	PowerOld = 0;
     a38:	10 92 27 24 	sts	0x2427, r1	; 0x802427 <PowerOld>
	LastStep = RIGHT;
     a3c:	10 92 2a 24 	sts	0x242A, r1	; 0x80242a <LastStep>
     a40:	08 95       	ret

00000a42 <mppt>:
}

void mppt(uint16_t power)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
	if (((power > PowerOld) & (LastStep == RIGHT)) | ((power < PowerOld) & (LastStep == LEFT)))
     a48:	80 91 27 24 	lds	r24, 0x2427	; 0x802427 <PowerOld>
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	30 91 2a 24 	lds	r19, 0x242A	; 0x80242a <LastStep>
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	8c 17       	cp	r24, r28
     a56:	9d 07       	cpc	r25, r29
     a58:	08 f0       	brcs	.+2      	; 0xa5c <mppt+0x1a>
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	31 11       	cpse	r19, r1
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	24 23       	and	r18, r20
     a64:	59 f4       	brne	.+22     	; 0xa7c <mppt+0x3a>
     a66:	21 e0       	ldi	r18, 0x01	; 1
     a68:	c8 17       	cp	r28, r24
     a6a:	d9 07       	cpc	r29, r25
     a6c:	08 f0       	brcs	.+2      	; 0xa70 <mppt+0x2e>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	31 30       	cpi	r19, 0x01	; 1
     a74:	09 f0       	breq	.+2      	; 0xa78 <mppt+0x36>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	82 23       	and	r24, r18
     a7a:	69 f0       	breq	.+26     	; 0xa96 <mppt+0x54>
	{
		PWM_IncrementDutyCycle(STEP_SIZE);
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <PWM_IncrementDutyCycle>
		TCC0.CCDBUF = DutyCycle;
     a82:	80 91 0b 24 	lds	r24, 0x240B	; 0x80240b <DutyCycle>
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <__TEXT_REGION_LENGTH__+0x70083e>
     a8c:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <__TEXT_REGION_LENGTH__+0x70083f>
		LastStep = RIGHT;
     a90:	10 92 2a 24 	sts	0x242A, r1	; 0x80242a <LastStep>
     a94:	0d c0       	rjmp	.+26     	; 0xab0 <mppt+0x6e>
	}
	else
	{
		PWM_DecrementDutyCycle(STEP_SIZE);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 86 05 	call	0xb0c	; 0xb0c <PWM_DecrementDutyCycle>
		TCC0.CCDBUF = DutyCycle;
     a9c:	80 91 0b 24 	lds	r24, 0x240B	; 0x80240b <DutyCycle>
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <__TEXT_REGION_LENGTH__+0x70083e>
     aa6:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <__TEXT_REGION_LENGTH__+0x70083f>
		LastStep = LEFT;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	80 93 2a 24 	sts	0x242A, r24	; 0x80242a <LastStep>
	}
	PowerOld = power;
     ab0:	c0 93 27 24 	sts	0x2427, r28	; 0x802427 <PowerOld>
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <PWM_Enable>:

void PWM_Enable(void)
{
	//enable output on PC3
	//PORTC.REMAP &= PORT_TC0D_bm;
	PORTC.DIRSET |= PIN3_bm ;//| PIN7_bm;
     aba:	e0 e4       	ldi	r30, 0x40	; 64
     abc:	f6 e0       	ldi	r31, 0x06	; 6
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 60       	ori	r24, 0x08	; 8
     ac2:	81 83       	std	Z+1, r24	; 0x01

	
	//set clock
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm ) |TC_CLKSEL_DIV1_gc;
     ac4:	e0 e0       	ldi	r30, 0x00	; 0
     ac6:	f8 e0       	ldi	r31, 0x08	; 8
     ac8:	80 81       	ld	r24, Z
     aca:	80 7f       	andi	r24, 0xF0	; 240
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	80 83       	st	Z, r24
	
	//enable single slope pwm and compare capture channel a
	TCC0.CTRLB = (TCC0.CTRLB & ~TC0_WGMODE_gm) |TC_WGMODE_SS_gc | TC0_CCDEN_bm;
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	88 77       	andi	r24, 0x78	; 120
     ad4:	83 68       	ori	r24, 0x83	; 131
     ad6:	81 83       	std	Z+1, r24	; 0x01
	
	//set the period of the single slope pwm
	TCC0.PER = ( PWM_period & HiResMask ) ;
     ad8:	8c ef       	ldi	r24, 0xFC	; 252
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	86 a3       	std	Z+38, r24	; 0x26
     ade:	97 a3       	std	Z+39, r25	; 0x27

	// Enable interrupts on CC channel A with HI priority
	//TCC0.INTCTRLB = ( uint8_t ) TC_CCAINTLVL_LO_gc ;
	
	// Set default dutycycle.
	DutyCycle =  DUTYCYCLE_DEFAULT;
     ae0:	80 eb       	ldi	r24, 0xB0	; 176
     ae2:	80 93 0b 24 	sts	0x240B, r24	; 0x80240b <DutyCycle>
	//DutyCycle = SetDutyCycle (DUTYCYCLE_DEFAULT);
	TCC0.CCDBUF = DutyCycle;
     ae6:	80 eb       	ldi	r24, 0xB0	; 176
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	86 af       	std	Z+62, r24	; 0x3e
     aec:	97 af       	std	Z+63, r25	; 0x3f
     aee:	08 95       	ret

00000af0 <PWM_Disable>:
}

void PWM_Disable(void)
{
	// Turn off Timer / Counter ( no clock selected )
	TCC0.CTRLA = (TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f8 e0       	ldi	r31, 0x08	; 8
     af4:	80 81       	ld	r24, Z
     af6:	80 7f       	andi	r24, 0xF0	; 240
     af8:	80 83       	st	Z, r24
	
	//turn off waveform generation
	TCC0.CTRLB = 0;
     afa:	11 82       	std	Z+1, r1	; 0x01
	
	//turn off advanced waveform generation
	AWEXC.CTRL = 0;
     afc:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <__TEXT_REGION_LENGTH__+0x700880>
	
	// Set port C to input .
	PORTC.DIR = 0;
     b00:	e0 e4       	ldi	r30, 0x40	; 64
     b02:	f6 e0       	ldi	r31, 0x06	; 6
     b04:	10 82       	st	Z, r1
	
	// Enable Totempole w / pull - down on PIN0
	PORTC.PIN3CTRL = PORT_OPC_PULLDOWN_gc ;
     b06:	80 e1       	ldi	r24, 0x10	; 16
     b08:	83 8b       	std	Z+19, r24	; 0x13
     b0a:	08 95       	ret

00000b0c <PWM_DecrementDutyCycle>:
}

void PWM_DecrementDutyCycle ( uint8_t StepSize ) 
{
	if ( DutyCycle > DUTYCYCLE_MIN )
     b0c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <DutyCycle>
     b10:	91 31       	cpi	r25, 0x11	; 17
     b12:	18 f0       	brcs	.+6      	; 0xb1a <PWM_DecrementDutyCycle+0xe>
	{
		DutyCycle = DutyCycle - StepSize ;
     b14:	98 1b       	sub	r25, r24
     b16:	90 93 0b 24 	sts	0x240B, r25	; 0x80240b <DutyCycle>
     b1a:	08 95       	ret

00000b1c <PWM_IncrementDutyCycle>:
	}
}
	
void PWM_IncrementDutyCycle ( uint8_t StepSize ) 
{
	if ( DutyCycle < DUTYCYCLE_MAX )
     b1c:	90 91 0b 24 	lds	r25, 0x240B	; 0x80240b <DutyCycle>
     b20:	90 3f       	cpi	r25, 0xF0	; 240
     b22:	18 f4       	brcc	.+6      	; 0xb2a <PWM_IncrementDutyCycle+0xe>
	{
		DutyCycle += StepSize;
     b24:	89 0f       	add	r24, r25
     b26:	80 93 0b 24 	sts	0x240B, r24	; 0x80240b <DutyCycle>
     b2a:	08 95       	ret

00000b2c <sensor_init>:
	{
		TWI_MasterWriteRead(&twiMaster, ADDRESS_BATTERY, &battery_register[RegPos], 1, 2);
		while(twiMaster.status != TWIM_STATUS_READY) {}
		Check_And_Write_Battery_Registers(battery_register[RegPos],twiMaster.readData[0],twiMaster.readData[1]);
	}
}
     b2c:	2b e9       	ldi	r18, 0x9B	; 155
     b2e:	40 e4       	ldi	r20, 0x40	; 64
     b30:	60 ea       	ldi	r22, 0xA0	; 160
     b32:	74 e0       	ldi	r23, 0x04	; 4
     b34:	8c e2       	ldi	r24, 0x2C	; 44
     b36:	94 e2       	ldi	r25, 0x24	; 36
     b38:	0e 94 90 08 	call	0x1120	; 0x1120 <TWI_MasterInit>
     b3c:	08 95       	ret

00000b3e <current_init>:
     b3e:	af 92       	push	r10
     b40:	bf 92       	push	r11
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	60 97       	sbiw	r28, 0x10	; 16
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	80 e4       	ldi	r24, 0x40	; 64
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	81 e4       	ldi	r24, 0x41	; 65
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	83 e4       	ldi	r24, 0x43	; 67
     b64:	8b 83       	std	Y+3, r24	; 0x03
     b66:	82 e4       	ldi	r24, 0x42	; 66
     b68:	8c 83       	std	Y+4, r24	; 0x04
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	8d 83       	std	Y+5, r24	; 0x05
     b6e:	98 e0       	ldi	r25, 0x08	; 8
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	1f 82       	std	Y+7, r1	; 0x07
     b74:	88 87       	std	Y+8, r24	; 0x08
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	89 87       	std	Y+9, r24	; 0x09
     b7a:	1a 86       	std	Y+10, r1	; 0x0a
     b7c:	96 e0       	ldi	r25, 0x06	; 6
     b7e:	9b 87       	std	Y+11, r25	; 0x0b
     b80:	8c 87       	std	Y+12, r24	; 0x0c
     b82:	1d 86       	std	Y+13, r1	; 0x0d
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	8e 87       	std	Y+14, r24	; 0x0e
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	8f 87       	std	Y+15, r24	; 0x0f
     b8c:	18 8a       	std	Y+16, r1	; 0x10
     b8e:	00 e0       	ldi	r16, 0x00	; 0
     b90:	23 e0       	ldi	r18, 0x03	; 3
     b92:	ae 01       	movw	r20, r28
     b94:	48 5f       	subi	r20, 0xF8	; 248
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	60 e4       	ldi	r22, 0x40	; 64
     b9a:	8c e2       	ldi	r24, 0x2C	; 44
     b9c:	94 e2       	ldi	r25, 0x24	; 36
     b9e:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
     ba2:	ec e2       	ldi	r30, 0x2C	; 44
     ba4:	f4 e2       	ldi	r31, 0x24	; 36
     ba6:	87 89       	ldd	r24, Z+23	; 0x17
     ba8:	81 11       	cpse	r24, r1
     baa:	fd cf       	rjmp	.-6      	; 0xba6 <current_init+0x68>
     bac:	00 e0       	ldi	r16, 0x00	; 0
     bae:	23 e0       	ldi	r18, 0x03	; 3
     bb0:	ae 01       	movw	r20, r28
     bb2:	45 5f       	subi	r20, 0xF5	; 245
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	60 e4       	ldi	r22, 0x40	; 64
     bb8:	8c e2       	ldi	r24, 0x2C	; 44
     bba:	94 e2       	ldi	r25, 0x24	; 36
     bbc:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
     bc0:	ec e2       	ldi	r30, 0x2C	; 44
     bc2:	f4 e2       	ldi	r31, 0x24	; 36
     bc4:	87 89       	ldd	r24, Z+23	; 0x17
     bc6:	81 11       	cpse	r24, r1
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <current_init+0x86>
     bca:	00 e0       	ldi	r16, 0x00	; 0
     bcc:	23 e0       	ldi	r18, 0x03	; 3
     bce:	ae 01       	movw	r20, r28
     bd0:	42 5f       	subi	r20, 0xF2	; 242
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	60 e4       	ldi	r22, 0x40	; 64
     bd6:	8c e2       	ldi	r24, 0x2C	; 44
     bd8:	94 e2       	ldi	r25, 0x24	; 36
     bda:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f4 e2       	ldi	r31, 0x24	; 36
     be2:	87 89       	ldd	r24, Z+23	; 0x17
     be4:	81 11       	cpse	r24, r1
     be6:	fd cf       	rjmp	.-6      	; 0xbe2 <current_init+0xa4>
     be8:	6e 01       	movw	r12, r28
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	c8 0e       	add	r12, r24
     bee:	d1 1c       	adc	r13, r1
     bf0:	5e 01       	movw	r10, r28
     bf2:	e5 e0       	ldi	r30, 0x05	; 5
     bf4:	ae 0e       	add	r10, r30
     bf6:	b1 1c       	adc	r11, r1
     bf8:	0f 2e       	mov	r0, r31
     bfa:	fc e2       	ldi	r31, 0x2C	; 44
     bfc:	ef 2e       	mov	r14, r31
     bfe:	f4 e2       	ldi	r31, 0x24	; 36
     c00:	ff 2e       	mov	r15, r31
     c02:	f0 2d       	mov	r31, r0
     c04:	f6 01       	movw	r30, r12
     c06:	61 91       	ld	r22, Z+
     c08:	6f 01       	movw	r12, r30
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	23 e0       	ldi	r18, 0x03	; 3
     c0e:	ae 01       	movw	r20, r28
     c10:	4b 5f       	subi	r20, 0xFB	; 251
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	c7 01       	movw	r24, r14
     c16:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
     c1a:	f7 01       	movw	r30, r14
     c1c:	87 89       	ldd	r24, Z+23	; 0x17
     c1e:	81 11       	cpse	r24, r1
     c20:	fc cf       	rjmp	.-8      	; 0xc1a <current_init+0xdc>
     c22:	ca 14       	cp	r12, r10
     c24:	db 04       	cpc	r13, r11
     c26:	71 f7       	brne	.-36     	; 0xc04 <current_init+0xc6>
     c28:	60 96       	adiw	r28, 0x10	; 16
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	08 95       	ret

00000c42 <Check_And_Write_Current_Registers>:

void Check_And_Write_Current_Registers(uint8_t reg, uint8_t adr, uint8_t high_byte, uint8_t low_byte)
{
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	c4 2f       	mov	r28, r20
     c48:	d2 2f       	mov	r29, r18
	switch(adr) {
     c4a:	61 34       	cpi	r22, 0x41	; 65
     c4c:	09 f4       	brne	.+2      	; 0xc50 <Check_And_Write_Current_Registers+0xe>
     c4e:	50 c0       	rjmp	.+160    	; 0xcf0 <Check_And_Write_Current_Registers+0xae>
     c50:	18 f4       	brcc	.+6      	; 0xc58 <Check_And_Write_Current_Registers+0x16>
     c52:	60 34       	cpi	r22, 0x40	; 64
     c54:	41 f0       	breq	.+16     	; 0xc66 <Check_And_Write_Current_Registers+0x24>
     c56:	f4 c0       	rjmp	.+488    	; 0xe40 <Check_And_Write_Current_Registers+0x1fe>
     c58:	62 34       	cpi	r22, 0x42	; 66
     c5a:	09 f4       	brne	.+2      	; 0xc5e <Check_And_Write_Current_Registers+0x1c>
     c5c:	b9 c0       	rjmp	.+370    	; 0xdd0 <Check_And_Write_Current_Registers+0x18e>
     c5e:	63 34       	cpi	r22, 0x43	; 67
     c60:	09 f4       	brne	.+2      	; 0xc64 <Check_And_Write_Current_Registers+0x22>
     c62:	7e c0       	rjmp	.+252    	; 0xd60 <Check_And_Write_Current_Registers+0x11e>
     c64:	ed c0       	rjmp	.+474    	; 0xe40 <Check_And_Write_Current_Registers+0x1fe>
		case ADDRESS_CURRENT_SENS_BUS :
		switch(reg) {
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	29 f0       	breq	.+10     	; 0xc74 <Check_And_Write_Current_Registers+0x32>
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	f9 f0       	breq	.+62     	; 0xcac <Check_And_Write_Current_Registers+0x6a>
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	d9 f5       	brne	.+118    	; 0xce8 <Check_And_Write_Current_Registers+0xa6>
     c72:	2b c0       	rjmp	.+86     	; 0xcca <Check_And_Write_Current_Registers+0x88>
			case CUR_BUS_VOLTAGE_REG :
					
					if (high_byte < 0x0a)
     c74:	4a 30       	cpi	r20, 0x0A	; 10
     c76:	30 f4       	brcc	.+12     	; 0xc84 <Check_And_Write_Current_Registers+0x42>
					{
	//					bat_empty_flag=1;
						critical_error=1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <critical_error>
						error_report(ERROR_UVB);
     c7e:	8a e1       	ldi	r24, 0x1A	; 26
     c80:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
					}
					if (high_byte > 0x35)
     c84:	c6 33       	cpi	r28, 0x36	; 54
     c86:	18 f0       	brcs	.+6      	; 0xc8e <Check_And_Write_Current_Registers+0x4c>
					{
						error_report(ERROR_OVB);
     c88:	8a e1       	ldi	r24, 0x1A	; 26
     c8a:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
					}
			vregs_write(VREGS_BUS_VOLTAGE_LOW, low_byte);
     c8e:	4d 2f       	mov	r20, r29
     c90:	6e e2       	ldi	r22, 0x2E	; 46
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_BUS_VOLTAGE_HIGH, high_byte);
     c9c:	4c 2f       	mov	r20, r28
     c9e:	6f e2       	ldi	r22, 0x2F	; 47
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     caa:	cd c0       	rjmp	.+410    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			case CUR_CURRENT_REG :
			vregs_write(VREGS_BUS_CURRENT_LOW, low_byte);
     cac:	42 2f       	mov	r20, r18
     cae:	64 e2       	ldi	r22, 0x24	; 36
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_BUS_CURRENT_HIGH, high_byte);
     cba:	4c 2f       	mov	r20, r28
     cbc:	65 e2       	ldi	r22, 0x25	; 37
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     cc8:	be c0       	rjmp	.+380    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			case CUR_SHUNT_REG :
			vregs_write(VREGS_BUS_CURRENT_LOW, low_byte);
     cca:	42 2f       	mov	r20, r18
     ccc:	64 e2       	ldi	r22, 0x24	; 36
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_BUS_CURRENT_HIGH, high_byte);
     cd8:	4c 2f       	mov	r20, r28
     cda:	65 e2       	ldi	r22, 0x25	; 37
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     ce6:	af c0       	rjmp	.+350    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			default :
			error_report(ERROR_UNKNOWN);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
     cee:	ab c0       	rjmp	.+342    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
		}
		break;
		case ADDRESS_CURRENT_SENS_5V :
		switch(reg) {
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	a1 f0       	breq	.+40     	; 0xd1c <Check_And_Write_Current_Registers+0xda>
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	19 f0       	breq	.+6      	; 0xcfe <Check_And_Write_Current_Registers+0xbc>
     cf8:	81 11       	cpse	r24, r1
     cfa:	2e c0       	rjmp	.+92     	; 0xd58 <Check_And_Write_Current_Registers+0x116>
     cfc:	1e c0       	rjmp	.+60     	; 0xd3a <Check_And_Write_Current_Registers+0xf8>
			case CUR_CURRENT_REG :
			vregs_write(VREGS_5V_CURRENT_LOW, low_byte);
     cfe:	42 2f       	mov	r20, r18
     d00:	68 e2       	ldi	r22, 0x28	; 40
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_5V_CURRENT_HIGH, high_byte);
     d0c:	4c 2f       	mov	r20, r28
     d0e:	69 e2       	ldi	r22, 0x29	; 41
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     d1a:	95 c0       	rjmp	.+298    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			case  CUR_BUS_VOLTAGE_REG:
			vregs_write(VREGS_5V_VOLTAGE_LOW, low_byte);
     d1c:	42 2f       	mov	r20, r18
     d1e:	62 e3       	ldi	r22, 0x32	; 50
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_5V_VOLTAGE_HIGH, high_byte);
     d2a:	4c 2f       	mov	r20, r28
     d2c:	63 e3       	ldi	r22, 0x33	; 51
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     d38:	86 c0       	rjmp	.+268    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			case CUR_CONF_REG :
			vregs_write(VREGS_5V_CURRENT_LOW, low_byte);
     d3a:	42 2f       	mov	r20, r18
     d3c:	68 e2       	ldi	r22, 0x28	; 40
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_5V_CURRENT_HIGH, high_byte);
     d48:	4c 2f       	mov	r20, r28
     d4a:	69 e2       	ldi	r22, 0x29	; 41
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			default :
			error_report(ERROR_UNKNOWN);
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
     d5e:	73 c0       	rjmp	.+230    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
		}
		break;
		case ADDRESS_CURRENT_SENS_3V3 :
		switch(reg) {
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	a1 f0       	breq	.+40     	; 0xd8c <Check_And_Write_Current_Registers+0x14a>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	19 f0       	breq	.+6      	; 0xd6e <Check_And_Write_Current_Registers+0x12c>
     d68:	81 11       	cpse	r24, r1
     d6a:	2e c0       	rjmp	.+92     	; 0xdc8 <Check_And_Write_Current_Registers+0x186>
     d6c:	1e c0       	rjmp	.+60     	; 0xdaa <Check_And_Write_Current_Registers+0x168>
			case CUR_CURRENT_REG :
			vregs_write(VREGS_3V3_CURRENT_LOW, low_byte);
     d6e:	42 2f       	mov	r20, r18
     d70:	66 e2       	ldi	r22, 0x26	; 38
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_3V3_CURRENT_HIGH, high_byte);
     d7c:	4c 2f       	mov	r20, r28
     d7e:	67 e2       	ldi	r22, 0x27	; 39
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     d8a:	5d c0       	rjmp	.+186    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			case CUR_BUS_VOLTAGE_REG :
			vregs_write(VREGS_3V3_VOLTAGE_LOW, low_byte);
     d8c:	42 2f       	mov	r20, r18
     d8e:	60 e3       	ldi	r22, 0x30	; 48
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_3V3_VOLTAGE_HIGH, high_byte);
     d9a:	4c 2f       	mov	r20, r28
     d9c:	61 e3       	ldi	r22, 0x31	; 49
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     da8:	4e c0       	rjmp	.+156    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			case CUR_CONF_REG :
			vregs_write(VREGS_3V3_CURRENT_LOW, low_byte);
     daa:	42 2f       	mov	r20, r18
     dac:	66 e2       	ldi	r22, 0x26	; 38
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			vregs_write(VREGS_3V3_CURRENT_HIGH, high_byte);
     db8:	4c 2f       	mov	r20, r28
     dba:	67 e2       	ldi	r22, 0x27	; 39
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
			break;
     dc6:	3f c0       	rjmp	.+126    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			default :
			error_report(ERROR_UNKNOWN);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
     dce:	3b c0       	rjmp	.+118    	; 0xe46 <Check_And_Write_Current_Registers+0x204>
		}
		break;
		case ADDRESS_CURRENT_SENS_SOLAR :
		switch(reg) {
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	a1 f0       	breq	.+40     	; 0xdfc <Check_And_Write_Current_Registers+0x1ba>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	19 f0       	breq	.+6      	; 0xdde <Check_And_Write_Current_Registers+0x19c>
     dd8:	81 11       	cpse	r24, r1
     dda:	2e c0       	rjmp	.+92     	; 0xe38 <Check_And_Write_Current_Registers+0x1f6>
     ddc:	1e c0       	rjmp	.+60     	; 0xe1a <Check_And_Write_Current_Registers+0x1d8>
			case CUR_CURRENT_REG :
				vregs_write(VREGS_SOLAR_CURRENT_LOW, low_byte);
     dde:	42 2f       	mov	r20, r18
     de0:	60 e2       	ldi	r22, 0x20	; 32
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				vregs_write(VREGS_SOLAR_CURRENT_HIGH, high_byte);
     dec:	4c 2f       	mov	r20, r28
     dee:	61 e2       	ldi	r22, 0x21	; 33
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				break;
     dfa:	25 c0       	rjmp	.+74     	; 0xe46 <Check_And_Write_Current_Registers+0x204>
				
			case CUR_BUS_VOLTAGE_REG :
				vregs_write(VREGS_SOLAR_VOLTAGE_LOW, low_byte);
     dfc:	42 2f       	mov	r20, r18
     dfe:	6a e2       	ldi	r22, 0x2A	; 42
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				vregs_write(VREGS_SOLAR_VOLTAGE_HIGH, high_byte);
     e0a:	4c 2f       	mov	r20, r28
     e0c:	6b e2       	ldi	r22, 0x2B	; 43
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				break;
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			
			case CUR_CONF_REG :
				vregs_write(VREGS_SOLAR_CURRENT_LOW, low_byte);
     e1a:	42 2f       	mov	r20, r18
     e1c:	60 e2       	ldi	r22, 0x20	; 32
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				vregs_write(VREGS_SOLAR_CURRENT_HIGH, high_byte);
     e28:	4c 2f       	mov	r20, r28
     e2a:	61 e2       	ldi	r22, 0x21	; 33
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
				break;
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <Check_And_Write_Current_Registers+0x204>
			default :
			error_report(ERROR_UNKNOWN);
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <Check_And_Write_Current_Registers+0x204>
		}
		break;
		default :
		error_report(ERROR_UNKNOWN);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
	}
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <Read_Current_Registers>:

void Read_Current_Registers(void)
{
     e4c:	2f 92       	push	r2
     e4e:	3f 92       	push	r3
     e50:	4f 92       	push	r4
     e52:	5f 92       	push	r5
     e54:	6f 92       	push	r6
     e56:	7f 92       	push	r7
     e58:	8f 92       	push	r8
     e5a:	9f 92       	push	r9
     e5c:	af 92       	push	r10
     e5e:	bf 92       	push	r11
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	26 97       	sbiw	r28, 0x06	; 6
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	de bf       	out	0x3e, r29	; 62
	uint8_t current_addresses[4] = {ADDRESS_CURRENT_SENS_BUS,ADDRESS_CURRENT_SENS_5V, ADDRESS_CURRENT_SENS_3V3, ADDRESS_CURRENT_SENS_SOLAR};
     e7a:	80 e4       	ldi	r24, 0x40	; 64
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	81 e4       	ldi	r24, 0x41	; 65
     e80:	8a 83       	std	Y+2, r24	; 0x02
     e82:	83 e4       	ldi	r24, 0x43	; 67
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	82 e4       	ldi	r24, 0x42	; 66
     e88:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t current_register[2] = {CUR_CURRENT_REG, CUR_BUS_VOLTAGE_REG};
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	8d 83       	std	Y+5, r24	; 0x05
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	8e 83       	std	Y+6, r24	; 0x06
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	5c 01       	movw	r10, r24
     e98:	2e 01       	movw	r4, r28
     e9a:	95 e0       	ldi	r25, 0x05	; 5
     e9c:	49 0e       	add	r4, r25
     e9e:	51 1c       	adc	r5, r1
     ea0:	3e 01       	movw	r6, r28
     ea2:	e7 e0       	ldi	r30, 0x07	; 7
     ea4:	6e 0e       	add	r6, r30
     ea6:	71 1c       	adc	r7, r1
	for (uint8_t AdrPos = 0; AdrPos < 4; AdrPos++)
	{
		for (uint8_t RegPos = 0; RegPos < 2; RegPos++)
		{
			TWI_MasterWriteRead(&twiMaster, current_addresses[AdrPos], &current_register[RegPos], 1, 2);
     ea8:	0f 2e       	mov	r0, r31
     eaa:	fc e2       	ldi	r31, 0x2C	; 44
     eac:	ef 2e       	mov	r14, r31
     eae:	f4 e2       	ldi	r31, 0x24	; 36
     eb0:	ff 2e       	mov	r15, r31
     eb2:	f0 2d       	mov	r31, r0
			while(twiMaster.status != TWIM_STATUS_READY) {}
     eb4:	2e 2c       	mov	r2, r14
     eb6:	3f 2c       	mov	r3, r15
     eb8:	22 c0       	rjmp	.+68     	; 0xefe <Read_Current_Registers+0xb2>
	uint8_t current_register[2] = {CUR_CURRENT_REG, CUR_BUS_VOLTAGE_REG};
	for (uint8_t AdrPos = 0; AdrPos < 4; AdrPos++)
	{
		for (uint8_t RegPos = 0; RegPos < 2; RegPos++)
		{
			TWI_MasterWriteRead(&twiMaster, current_addresses[AdrPos], &current_register[RegPos], 1, 2);
     eba:	46 01       	movw	r8, r12
     ebc:	f5 01       	movw	r30, r10
     ebe:	10 81       	ld	r17, Z
     ec0:	02 e0       	ldi	r16, 0x02	; 2
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	a6 01       	movw	r20, r12
     ec6:	61 2f       	mov	r22, r17
     ec8:	82 2d       	mov	r24, r2
     eca:	93 2d       	mov	r25, r3
     ecc:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
			while(twiMaster.status != TWIM_STATUS_READY) {}
     ed0:	f7 01       	movw	r30, r14
     ed2:	87 89       	ldd	r24, Z+23	; 0x17
     ed4:	81 11       	cpse	r24, r1
     ed6:	fc cf       	rjmp	.-8      	; 0xed0 <Read_Current_Registers+0x84>
			Check_And_Write_Current_Registers(current_register[RegPos],current_addresses[AdrPos],twiMaster.readData[0],twiMaster.readData[1]);
     ed8:	24 85       	ldd	r18, Z+12	; 0x0c
     eda:	43 85       	ldd	r20, Z+11	; 0x0b
     edc:	ff ef       	ldi	r31, 0xFF	; 255
     ede:	cf 1a       	sub	r12, r31
     ee0:	df 0a       	sbc	r13, r31
     ee2:	61 2f       	mov	r22, r17
     ee4:	f4 01       	movw	r30, r8
     ee6:	80 81       	ld	r24, Z
     ee8:	0e 94 21 06 	call	0xc42	; 0xc42 <Check_And_Write_Current_Registers>
{
	uint8_t current_addresses[4] = {ADDRESS_CURRENT_SENS_BUS,ADDRESS_CURRENT_SENS_5V, ADDRESS_CURRENT_SENS_3V3, ADDRESS_CURRENT_SENS_SOLAR};
	uint8_t current_register[2] = {CUR_CURRENT_REG, CUR_BUS_VOLTAGE_REG};
	for (uint8_t AdrPos = 0; AdrPos < 4; AdrPos++)
	{
		for (uint8_t RegPos = 0; RegPos < 2; RegPos++)
     eec:	6c 14       	cp	r6, r12
     eee:	7d 04       	cpc	r7, r13
     ef0:	21 f7       	brne	.-56     	; 0xeba <Read_Current_Registers+0x6e>
     ef2:	ff ef       	ldi	r31, 0xFF	; 255
     ef4:	af 1a       	sub	r10, r31
     ef6:	bf 0a       	sbc	r11, r31

void Read_Current_Registers(void)
{
	uint8_t current_addresses[4] = {ADDRESS_CURRENT_SENS_BUS,ADDRESS_CURRENT_SENS_5V, ADDRESS_CURRENT_SENS_3V3, ADDRESS_CURRENT_SENS_SOLAR};
	uint8_t current_register[2] = {CUR_CURRENT_REG, CUR_BUS_VOLTAGE_REG};
	for (uint8_t AdrPos = 0; AdrPos < 4; AdrPos++)
     ef8:	4a 14       	cp	r4, r10
     efa:	5b 04       	cpc	r5, r11
     efc:	29 f0       	breq	.+10     	; 0xf08 <Read_Current_Registers+0xbc>
     efe:	6e 01       	movw	r12, r28
     f00:	85 e0       	ldi	r24, 0x05	; 5
     f02:	c8 0e       	add	r12, r24
     f04:	d1 1c       	adc	r13, r1
     f06:	d9 cf       	rjmp	.-78     	; 0xeba <Read_Current_Registers+0x6e>
			TWI_MasterWriteRead(&twiMaster, current_addresses[AdrPos], &current_register[RegPos], 1, 2);
			while(twiMaster.status != TWIM_STATUS_READY) {}
			Check_And_Write_Current_Registers(current_register[RegPos],current_addresses[AdrPos],twiMaster.readData[0],twiMaster.readData[1]);
		}
	}
}
     f08:	26 96       	adiw	r28, 0x06	; 6
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	df 90       	pop	r13
     f1c:	cf 90       	pop	r12
     f1e:	bf 90       	pop	r11
     f20:	af 90       	pop	r10
     f22:	9f 90       	pop	r9
     f24:	8f 90       	pop	r8
     f26:	7f 90       	pop	r7
     f28:	6f 90       	pop	r6
     f2a:	5f 90       	pop	r5
     f2c:	4f 90       	pop	r4
     f2e:	3f 90       	pop	r3
     f30:	2f 90       	pop	r2
     f32:	08 95       	ret

00000f34 <Check_And_Write_Qi_Registers>:

void Check_And_Write_Qi_Registers(uint8_t reg, uint8_t high_byte, uint8_t low_byte)
{
     f34:	cf 93       	push	r28
     f36:	c6 2f       	mov	r28, r22
	switch(reg) {
     f38:	80 34       	cpi	r24, 0x40	; 64
     f3a:	19 f0       	breq	.+6      	; 0xf42 <Check_And_Write_Qi_Registers+0xe>
     f3c:	82 34       	cpi	r24, 0x42	; 66
     f3e:	79 f0       	breq	.+30     	; 0xf5e <Check_And_Write_Qi_Registers+0x2a>
     f40:	1c c0       	rjmp	.+56     	; 0xf7a <Check_And_Write_Qi_Registers+0x46>
		case QI_VOLTAGE_REG :
		vregs_write(VREGS_QI_VOLTAGE_LOW, low_byte);
     f42:	6c e2       	ldi	r22, 0x2C	; 44
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		vregs_write(VREGS_QI_VOLTAGE_HIGH, high_byte);
     f4e:	4c 2f       	mov	r20, r28
     f50:	6d e2       	ldi	r22, 0x2D	; 45
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		break;
     f5c:	11 c0       	rjmp	.+34     	; 0xf80 <Check_And_Write_Qi_Registers+0x4c>
		case QI_CURRENT_REG :
		vregs_write(VREGS_QI_CURRENT_LOW, low_byte);
     f5e:	62 e2       	ldi	r22, 0x22	; 34
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		vregs_write(VREGS_QI_CURRENT_HIGH, high_byte);
     f6a:	4c 2f       	mov	r20, r28
     f6c:	63 e2       	ldi	r22, 0x23	; 35
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		break;
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <Check_And_Write_Qi_Registers+0x4c>
		default :
		error_report(ERROR_UNKNOWN);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
	}
}
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <Read_Qi_Registers>:
void Read_Qi_Registers(void)
{
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <Read_Qi_Registers+0x18>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t qi_register[2] = {QI_VOLTAGE_REG, QI_CURRENT_REG};
     fa0:	80 e4       	ldi	r24, 0x40	; 64
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	82 e4       	ldi	r24, 0x42	; 66
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	6c 01       	movw	r12, r24
     fae:	4e 01       	movw	r8, r28
     fb0:	93 e0       	ldi	r25, 0x03	; 3
     fb2:	89 0e       	add	r8, r25
     fb4:	91 1c       	adc	r9, r1
	
	for (int RegPos = 0; RegPos < 2; RegPos++)
	{
		TWI_MasterWriteRead(&twiMaster, ADDRESS_QI_RECEIVER, &qi_register[RegPos], 1, 2);
     fb6:	0f 2e       	mov	r0, r31
     fb8:	fc e2       	ldi	r31, 0x2C	; 44
     fba:	ef 2e       	mov	r14, r31
     fbc:	f4 e2       	ldi	r31, 0x24	; 36
     fbe:	ff 2e       	mov	r15, r31
     fc0:	f0 2d       	mov	r31, r0
     fc2:	56 01       	movw	r10, r12
     fc4:	02 e0       	ldi	r16, 0x02	; 2
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	a6 01       	movw	r20, r12
     fca:	65 e2       	ldi	r22, 0x25	; 37
     fcc:	c7 01       	movw	r24, r14
     fce:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
		while(twiMaster.status != TWIM_STATUS_READY) {}
     fd2:	f7 01       	movw	r30, r14
     fd4:	87 89       	ldd	r24, Z+23	; 0x17
     fd6:	81 11       	cpse	r24, r1
     fd8:	fc cf       	rjmp	.-8      	; 0xfd2 <Read_Qi_Registers+0x4e>
		Check_And_Write_Qi_Registers(qi_register[RegPos],twiMaster.readData[0],twiMaster.readData[1]);
     fda:	44 85       	ldd	r20, Z+12	; 0x0c
     fdc:	63 85       	ldd	r22, Z+11	; 0x0b
     fde:	ff ef       	ldi	r31, 0xFF	; 255
     fe0:	cf 1a       	sub	r12, r31
     fe2:	df 0a       	sbc	r13, r31
     fe4:	f5 01       	movw	r30, r10
     fe6:	80 81       	ld	r24, Z
     fe8:	0e 94 9a 07 	call	0xf34	; 0xf34 <Check_And_Write_Qi_Registers>
}
void Read_Qi_Registers(void)
{
	uint8_t qi_register[2] = {QI_VOLTAGE_REG, QI_CURRENT_REG};
	
	for (int RegPos = 0; RegPos < 2; RegPos++)
     fec:	c8 14       	cp	r12, r8
     fee:	d9 04       	cpc	r13, r9
     ff0:	41 f7       	brne	.-48     	; 0xfc2 <Read_Qi_Registers+0x3e>
	{
		TWI_MasterWriteRead(&twiMaster, ADDRESS_QI_RECEIVER, &qi_register[RegPos], 1, 2);
		while(twiMaster.status != TWIM_STATUS_READY) {}
		Check_And_Write_Qi_Registers(qi_register[RegPos],twiMaster.readData[0],twiMaster.readData[1]);
	}
}
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	08 95       	ret

0000100e <Check_And_Write_Temperature_Registers>:

void Check_And_Write_Temperature_Registers(uint8_t adr, uint8_t high_byte, uint8_t low_byte)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	c6 2f       	mov	r28, r22
    1014:	d4 2f       	mov	r29, r20
	switch(adr) {
    1016:	88 34       	cpi	r24, 0x48	; 72
    1018:	19 f0       	breq	.+6      	; 0x1020 <Check_And_Write_Temperature_Registers+0x12>
    101a:	89 34       	cpi	r24, 0x49	; 73
    101c:	d9 f0       	breq	.+54     	; 0x1054 <Check_And_Write_Temperature_Registers+0x46>
    101e:	34 c0       	rjmp	.+104    	; 0x1088 <Check_And_Write_Temperature_Registers+0x7a>
		case ADDRESS_TEMP_SENS_INPUT :
		
		if (high_byte & 0b10000000)//If the input temperature is lower than 0 degrees Celsius trigger UTI
    1020:	66 23       	and	r22, r22
    1022:	24 f4       	brge	.+8      	; 0x102c <Check_And_Write_Temperature_Registers+0x1e>
		{
			error_report(ERROR_UTI);
    1024:	88 e1       	ldi	r24, 0x18	; 24
    1026:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <Check_And_Write_Temperature_Registers+0x28>
		}
		else if (high_byte > 0x2d)//If the input temperature is higher than 45 degrees Celsius trigger OTI
    102c:	6e 32       	cpi	r22, 0x2E	; 46
    102e:	18 f0       	brcs	.+6      	; 0x1036 <Check_And_Write_Temperature_Registers+0x28>
		{
			error_report(ERROR_OTI);
    1030:	86 e1       	ldi	r24, 0x16	; 22
    1032:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
		}
		vregs_write(VREGS_INPUT_TEMP_LOW, low_byte);
    1036:	4d 2f       	mov	r20, r29
    1038:	6c e3       	ldi	r22, 0x3C	; 60
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		vregs_write(VREGS_INPUT_TEMP_HIGH, high_byte);
    1044:	4c 2f       	mov	r20, r28
    1046:	6d e3       	ldi	r22, 0x3D	; 61
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		break;
    1052:	1d c0       	rjmp	.+58     	; 0x108e <Check_And_Write_Temperature_Registers+0x80>
		case ADDRESS_TEMP_SENS_OUTPUT :
		if (high_byte & 0b10000000)//If the input temperature is lower than 0 degrees Celsius trigger UTI
    1054:	66 23       	and	r22, r22
    1056:	24 f4       	brge	.+8      	; 0x1060 <Check_And_Write_Temperature_Registers+0x52>
		{
			error_report(ERROR_UTO);
    1058:	89 e1       	ldi	r24, 0x19	; 25
    105a:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
    105e:	05 c0       	rjmp	.+10     	; 0x106a <Check_And_Write_Temperature_Registers+0x5c>
		}
		else if (high_byte > 0x41) //If the output temperature is higher than 60 degrees Celsius trigger OTO
    1060:	62 34       	cpi	r22, 0x42	; 66
    1062:	18 f0       	brcs	.+6      	; 0x106a <Check_And_Write_Temperature_Registers+0x5c>
		{
			error_report(ERROR_OTO);
    1064:	87 e1       	ldi	r24, 0x17	; 23
    1066:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
		}
		vregs_write(VREGS_OUTPUT_TEMP_LOW, low_byte);
    106a:	4d 2f       	mov	r20, r29
    106c:	6e e3       	ldi	r22, 0x3E	; 62
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		vregs_write(VREGS_OUTPUT_TEMP_HIGH, high_byte);
    1078:	4c 2f       	mov	r20, r28
    107a:	6f e3       	ldi	r22, 0x3F	; 63
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <vregs_write>
		break;
    1086:	03 c0       	rjmp	.+6      	; 0x108e <Check_And_Write_Temperature_Registers+0x80>
		default :
		error_report(ERROR_UNKNOWN);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 29 01 	call	0x252	; 0x252 <error_report>
	}
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <Read_Temperature_Registers>:

void Read_Temperature_Registers(void)
{
    1094:	af 92       	push	r10
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <Read_Temperature_Registers+0x16>
    10aa:	1f 92       	push	r1
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t temperature_addresses[2] = {ADDRESS_TEMP_SENS_INPUT, ADDRESS_TEMP_SENS_OUTPUT};
    10b0:	88 e4       	ldi	r24, 0x48	; 72
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	89 e4       	ldi	r24, 0x49	; 73
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t temperature_register[1] = {TEMP_REG};
    10b8:	1b 82       	std	Y+3, r1	; 0x03
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	6c 01       	movw	r12, r24
    10c0:	5e 01       	movw	r10, r28
    10c2:	93 e0       	ldi	r25, 0x03	; 3
    10c4:	a9 0e       	add	r10, r25
    10c6:	b1 1c       	adc	r11, r1
	
	for (uint8_t AdrPos = 0; AdrPos < 2; AdrPos++)
	{
		TWI_MasterWriteRead(&twiMaster, temperature_addresses[AdrPos], &temperature_register[0], 1, 2);
    10c8:	0f 2e       	mov	r0, r31
    10ca:	fc e2       	ldi	r31, 0x2C	; 44
    10cc:	ef 2e       	mov	r14, r31
    10ce:	f4 e2       	ldi	r31, 0x24	; 36
    10d0:	ff 2e       	mov	r15, r31
    10d2:	f0 2d       	mov	r31, r0
    10d4:	f6 01       	movw	r30, r12
    10d6:	11 91       	ld	r17, Z+
    10d8:	6f 01       	movw	r12, r30
    10da:	02 e0       	ldi	r16, 0x02	; 2
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	ae 01       	movw	r20, r28
    10e0:	4d 5f       	subi	r20, 0xFD	; 253
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	61 2f       	mov	r22, r17
    10e6:	c7 01       	movw	r24, r14
    10e8:	0e 94 a1 08 	call	0x1142	; 0x1142 <TWI_MasterWriteRead>
		while(twiMaster.status != TWIM_STATUS_READY) {}
    10ec:	f7 01       	movw	r30, r14
    10ee:	87 89       	ldd	r24, Z+23	; 0x17
    10f0:	81 11       	cpse	r24, r1
    10f2:	fc cf       	rjmp	.-8      	; 0x10ec <Read_Temperature_Registers+0x58>
		Check_And_Write_Temperature_Registers(temperature_addresses[AdrPos],twiMaster.readData[0],twiMaster.readData[1]);
    10f4:	44 85       	ldd	r20, Z+12	; 0x0c
    10f6:	63 85       	ldd	r22, Z+11	; 0x0b
    10f8:	81 2f       	mov	r24, r17
    10fa:	0e 94 07 08 	call	0x100e	; 0x100e <Check_And_Write_Temperature_Registers>
void Read_Temperature_Registers(void)
{
	uint8_t temperature_addresses[2] = {ADDRESS_TEMP_SENS_INPUT, ADDRESS_TEMP_SENS_OUTPUT};
	uint8_t temperature_register[1] = {TEMP_REG};
	
	for (uint8_t AdrPos = 0; AdrPos < 2; AdrPos++)
    10fe:	ca 14       	cp	r12, r10
    1100:	db 04       	cpc	r13, r11
    1102:	41 f7       	brne	.-48     	; 0x10d4 <Read_Temperature_Registers+0x40>
	{
		TWI_MasterWriteRead(&twiMaster, temperature_addresses[AdrPos], &temperature_register[0], 1, 2);
		while(twiMaster.status != TWIM_STATUS_READY) {}
		Check_And_Write_Temperature_Registers(temperature_addresses[AdrPos],twiMaster.readData[0],twiMaster.readData[1]);
	}
    1104:	23 96       	adiw	r28, 0x03	; 3
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	08 95       	ret

00001120 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
    1120:	fc 01       	movw	r30, r24
    1122:	60 83       	st	Z, r22
    1124:	71 83       	std	Z+1, r23	; 0x01
    1126:	48 63       	ori	r20, 0x38	; 56
    1128:	db 01       	movw	r26, r22
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	4c 93       	st	X, r20
    112e:	a0 81       	ld	r26, Z
    1130:	b1 81       	ldd	r27, Z+1	; 0x01
    1132:	15 96       	adiw	r26, 0x05	; 5
    1134:	2c 93       	st	X, r18
    1136:	01 90       	ld	r0, Z+
    1138:	f0 81       	ld	r31, Z
    113a:	e0 2d       	mov	r30, r0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	84 83       	std	Z+4, r24	; 0x04
    1140:	08 95       	ret

00001142 <TWI_MasterWriteRead>:
    1142:	0f 93       	push	r16
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	fc 01       	movw	r30, r24
    114a:	29 30       	cpi	r18, 0x09	; 9
    114c:	98 f5       	brcc	.+102    	; 0x11b4 <TWI_MasterWriteRead+0x72>
    114e:	09 30       	cpi	r16, 0x09	; 9
    1150:	98 f5       	brcc	.+102    	; 0x11b8 <TWI_MasterWriteRead+0x76>
    1152:	87 89       	ldd	r24, Z+23	; 0x17
    1154:	81 11       	cpse	r24, r1
    1156:	32 c0       	rjmp	.+100    	; 0x11bc <TWI_MasterWriteRead+0x7a>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	87 8b       	std	Z+23, r24	; 0x17
    115c:	10 8e       	std	Z+24, r1	; 0x18
    115e:	66 0f       	add	r22, r22
    1160:	62 83       	std	Z+2, r22	; 0x02
    1162:	22 23       	and	r18, r18
    1164:	69 f0       	breq	.+26     	; 0x1180 <TWI_MasterWriteRead+0x3e>
    1166:	a4 2f       	mov	r26, r20
    1168:	b5 2f       	mov	r27, r21
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	8d 91       	ld	r24, X+
    1170:	ef 01       	movw	r28, r30
    1172:	c4 0f       	add	r28, r20
    1174:	d5 1f       	adc	r29, r21
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	42 17       	cp	r20, r18
    117e:	b8 f3       	brcs	.-18     	; 0x116e <TWI_MasterWriteRead+0x2c>
    1180:	23 8b       	std	Z+19, r18	; 0x13
    1182:	04 8b       	std	Z+20, r16	; 0x14
    1184:	15 8a       	std	Z+21, r1	; 0x15
    1186:	16 8a       	std	Z+22, r1	; 0x16
    1188:	83 89       	ldd	r24, Z+19	; 0x13
    118a:	88 23       	and	r24, r24
    118c:	41 f0       	breq	.+16     	; 0x119e <TWI_MasterWriteRead+0x5c>
    118e:	82 81       	ldd	r24, Z+2	; 0x02
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	01 90       	ld	r0, Z+
    1194:	f0 81       	ld	r31, Z
    1196:	e0 2d       	mov	r30, r0
    1198:	86 83       	std	Z+6, r24	; 0x06
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	12 c0       	rjmp	.+36     	; 0x11c2 <TWI_MasterWriteRead+0x80>
    119e:	84 89       	ldd	r24, Z+20	; 0x14
    11a0:	88 23       	and	r24, r24
    11a2:	71 f0       	breq	.+28     	; 0x11c0 <TWI_MasterWriteRead+0x7e>
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	01 90       	ld	r0, Z+
    11aa:	f0 81       	ld	r31, Z
    11ac:	e0 2d       	mov	r30, r0
    11ae:	86 83       	std	Z+6, r24	; 0x06
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <TWI_MasterWriteRead+0x80>
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <TWI_MasterWriteRead+0x80>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <TWI_MasterWriteRead+0x80>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <TWI_MasterWriteRead+0x80>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    11ca:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    11cc:	a0 81       	ld	r26, Z
    11ce:	b1 81       	ldd	r27, Z+1	; 0x01
    11d0:	14 96       	adiw	r26, 0x04	; 4
    11d2:	9c 91       	ld	r25, X
    11d4:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    11d6:	92 ff       	sbrs	r25, 2
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
		twi->result = TWIM_RESULT_BUS_ERROR;
    11da:	84 e0       	ldi	r24, 0x04	; 4
    11dc:	80 8f       	std	Z+24, r24	; 0x18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    11e4:	98 60       	ori	r25, 0x08	; 8
    11e6:	14 96       	adiw	r26, 0x04	; 4
    11e8:	9c 93       	st	X, r25

	twi->status = TWIM_STATUS_READY;
    11ea:	17 8a       	std	Z+23, r1	; 0x17
    11ec:	08 95       	ret

000011ee <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    11f4:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
    11f6:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    11f8:	a0 81       	ld	r26, Z
    11fa:	b1 81       	ldd	r27, Z+1	; 0x01
    11fc:	14 96       	adiw	r26, 0x04	; 4
    11fe:	8c 91       	ld	r24, X
    1200:	14 97       	sbiw	r26, 0x04	; 4
    1202:	84 ff       	sbrs	r24, 4
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	13 96       	adiw	r26, 0x03	; 3
    120a:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    120c:	85 e0       	ldi	r24, 0x05	; 5
    120e:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
    1210:	17 8a       	std	Z+23, r1	; 0x17
    1212:	1c c0       	rjmp	.+56     	; 0x124c <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    1214:	85 89       	ldd	r24, Z+21	; 0x15
    1216:	89 17       	cp	r24, r25
    1218:	58 f4       	brcc	.+22     	; 0x1230 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
    121a:	85 89       	ldd	r24, Z+21	; 0x15
    121c:	ef 01       	movw	r28, r30
    121e:	c8 0f       	add	r28, r24
    1220:	d1 1d       	adc	r29, r1
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    1224:	17 96       	adiw	r26, 0x07	; 7
    1226:	8c 93       	st	X, r24
		++twi->bytesWritten;
    1228:	85 89       	ldd	r24, Z+21	; 0x15
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	85 8b       	std	Z+21, r24	; 0x15
    122e:	0e c0       	rjmp	.+28     	; 0x124c <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    1230:	86 89       	ldd	r24, Z+22	; 0x16
    1232:	82 17       	cp	r24, r18
    1234:	28 f4       	brcc	.+10     	; 0x1240 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    123a:	16 96       	adiw	r26, 0x06	; 6
    123c:	8c 93       	st	X, r24
    123e:	06 c0       	rjmp	.+12     	; 0x124c <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	13 96       	adiw	r26, 0x03	; 3
    1244:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    124a:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	08 95       	ret

00001252 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    1252:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    1254:	86 89       	ldd	r24, Z+22	; 0x16
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	70 f4       	brcc	.+28     	; 0x1276 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    125a:	a0 81       	ld	r26, Z
    125c:	b1 81       	ldd	r27, Z+1	; 0x01
    125e:	17 96       	adiw	r26, 0x07	; 7
    1260:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    1262:	96 89       	ldd	r25, Z+22	; 0x16
    1264:	df 01       	movw	r26, r30
    1266:	a9 0f       	add	r26, r25
    1268:	b1 1d       	adc	r27, r1
    126a:	1b 96       	adiw	r26, 0x0b	; 11
    126c:	8c 93       	st	X, r24
		twi->bytesRead++;
    126e:	86 89       	ldd	r24, Z+22	; 0x16
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	86 8b       	std	Z+22, r24	; 0x16
    1274:	08 c0       	rjmp	.+16     	; 0x1286 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    1276:	a0 81       	ld	r26, Z
    1278:	b1 81       	ldd	r27, Z+1	; 0x01
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	13 96       	adiw	r26, 0x03	; 3
    127e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    1284:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    1286:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    1288:	86 89       	ldd	r24, Z+22	; 0x16
    128a:	89 17       	cp	r24, r25
    128c:	30 f4       	brcc	.+12     	; 0x129a <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    128e:	01 90       	ld	r0, Z+
    1290:	f0 81       	ld	r31, Z
    1292:	e0 2d       	mov	r30, r0
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	83 83       	std	Z+3, r24	; 0x03
    1298:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    129a:	a0 81       	ld	r26, Z
    129c:	b1 81       	ldd	r27, Z+1	; 0x01
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	13 96       	adiw	r26, 0x03	; 3
    12a2:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
    12a8:	17 8a       	std	Z+23, r1	; 0x17
    12aa:	08 95       	ret

000012ac <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    12ac:	dc 01       	movw	r26, r24
    12ae:	ed 91       	ld	r30, X+
    12b0:	fc 91       	ld	r31, X
    12b2:	24 81       	ldd	r18, Z+4	; 0x04

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    12b4:	32 2f       	mov	r19, r18
    12b6:	3c 70       	andi	r19, 0x0C	; 12
    12b8:	19 f0       	breq	.+6      	; 0x12c0 <TWI_MasterInterruptHandler+0x14>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    12ba:	0e 94 e5 08 	call	0x11ca	; 0x11ca <TWI_MasterArbitrationLostBusErrorHandler>
    12be:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    12c0:	26 ff       	sbrs	r18, 6
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <TWI_MasterInterruptHandler+0x1e>
		TWI_MasterWriteHandler(twi);
    12c4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TWI_MasterWriteHandler>
    12c8:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    12ca:	22 23       	and	r18, r18
    12cc:	1c f4       	brge	.+6      	; 0x12d4 <TWI_MasterInterruptHandler+0x28>
		TWI_MasterReadHandler(twi);
    12ce:	0e 94 29 09 	call	0x1252	; 0x1252 <TWI_MasterReadHandler>
    12d2:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    12d4:	26 e0       	ldi	r18, 0x06	; 6
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
    12da:	17 8a       	std	Z+23, r1	; 0x17
    12dc:	08 95       	ret

000012de <TWI_SlaveInitializeDriver>:
 *  \param processDataFunction  Pointer to the function that handles incoming data.
 */
void TWI_SlaveInitializeDriver(TWI_Slave_t *twi,
                               TWI_t *module,
                               void (*processDataFunction) (void))
{
    12de:	fc 01       	movw	r30, r24
	twi->interface = module;
    12e0:	60 83       	st	Z, r22
    12e2:	71 83       	std	Z+1, r23	; 0x01
	twi->Process_Data = processDataFunction;
    12e4:	42 83       	std	Z+2, r20	; 0x02
    12e6:	53 83       	std	Z+3, r21	; 0x03
	twi->bytesReceived = 0;
    12e8:	14 8a       	std	Z+20, r1	; 0x14
	twi->bytesSent = 0;
    12ea:	15 8a       	std	Z+21, r1	; 0x15
	twi->status = TWIS_STATUS_READY;
    12ec:	16 8a       	std	Z+22, r1	; 0x16
	twi->result = TWIS_RESULT_UNKNOWN;
    12ee:	17 8a       	std	Z+23, r1	; 0x17
	twi->abort = false;
    12f0:	10 8e       	std	Z+24, r1	; 0x18
    12f2:	08 95       	ret

000012f4 <TWI_SlaveInitializeModule>:
 */
void TWI_SlaveInitializeModule(TWI_Slave_t *twi,
                               uint8_t address,
                               TWI_SLAVE_INTLVL_t intLevel)
{
	twi->interface->SLAVE.CTRLA = intLevel |
    12f4:	dc 01       	movw	r26, r24
    12f6:	ed 91       	ld	r30, X+
    12f8:	fc 91       	ld	r31, X
    12fa:	11 97       	sbiw	r26, 0x01	; 1
    12fc:	48 63       	ori	r20, 0x38	; 56
    12fe:	40 87       	std	Z+8, r20	; 0x08
	                              TWI_SLAVE_DIEN_bm |
	                              TWI_SLAVE_APIEN_bm |
	                              TWI_SLAVE_ENABLE_bm;
	twi->interface->SLAVE.ADDR = (address<<1);
    1300:	ed 91       	ld	r30, X+
    1302:	fc 91       	ld	r31, X
    1304:	66 0f       	add	r22, r22
    1306:	63 87       	std	Z+11, r22	; 0x0b
    1308:	08 95       	ret

0000130a <TWI_SlaveAddressMatchHandler>:
 *  Prepares TWI module for transaction when an address match occures.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveAddressMatchHandler(TWI_Slave_t *twi)
{
    130a:	fc 01       	movw	r30, r24
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
    130c:	80 8d       	ldd	r24, Z+24	; 0x18
    130e:	88 23       	and	r24, r24
    1310:	51 f0       	breq	.+20     	; 0x1326 <TWI_SlaveAddressMatchHandler+0x1c>
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1312:	a0 81       	ld	r26, Z
    1314:	b1 81       	ldd	r27, Z+1	; 0x01
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	19 96       	adiw	r26, 0x09	; 9
    131a:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    131c:	86 e0       	ldi	r24, 0x06	; 6
    131e:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1320:	16 8a       	std	Z+22, r1	; 0x16
{
	/* If application signalling need to abort (error occured). */
	if (twi->abort) {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
		twi->abort = false;
    1322:	10 8e       	std	Z+24, r1	; 0x18
    1324:	08 95       	ret
	} else {
		twi->status = TWIS_STATUS_BUSY;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	86 8b       	std	Z+22, r24	; 0x16
		twi->result = TWIS_RESULT_UNKNOWN;
    132a:	17 8a       	std	Z+23, r1	; 0x17

		/* Disable stop interrupt. */
		uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    132c:	a0 81       	ld	r26, Z
    132e:	b1 81       	ldd	r27, Z+1	; 0x01
    1330:	18 96       	adiw	r26, 0x08	; 8
    1332:	8c 91       	ld	r24, X
    1334:	18 97       	sbiw	r26, 0x08	; 8
		twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    1336:	8b 7f       	andi	r24, 0xFB	; 251
    1338:	18 96       	adiw	r26, 0x08	; 8
    133a:	8c 93       	st	X, r24

		twi->bytesReceived = 0;
    133c:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    133e:	15 8a       	std	Z+21, r1	; 0x15

		/* Send ACK, wait for data interrupt. */
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    1340:	01 90       	ld	r0, Z+
    1342:	f0 81       	ld	r31, Z
    1344:	e0 2d       	mov	r30, r0
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	81 87       	std	Z+9, r24	; 0x09
    134a:	08 95       	ret

0000134c <TWI_SlaveStopHandler>:
/*! \brief TWI stop condition interrupt handler.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveStopHandler(TWI_Slave_t *twi)
{
    134c:	fc 01       	movw	r30, r24
	/* Disable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    134e:	a0 81       	ld	r26, Z
    1350:	b1 81       	ldd	r27, Z+1	; 0x01
    1352:	18 96       	adiw	r26, 0x08	; 8
    1354:	8c 91       	ld	r24, X
    1356:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA & ~TWI_SLAVE_PIEN_bm;
    1358:	8b 7f       	andi	r24, 0xFB	; 251
    135a:	18 96       	adiw	r26, 0x08	; 8
    135c:	8c 93       	st	X, r24
	
	/* Clear APIF, according to flowchart don't ACK or NACK */
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    135e:	a0 81       	ld	r26, Z
    1360:	b1 81       	ldd	r27, Z+1	; 0x01
    1362:	1a 96       	adiw	r26, 0x0a	; 10
    1364:	8c 91       	ld	r24, X
    1366:	1a 97       	sbiw	r26, 0x0a	; 10
	twi->interface->SLAVE.STATUS = currentStatus | TWI_SLAVE_APIF_bm;
    1368:	80 64       	ori	r24, 0x40	; 64
    136a:	1a 96       	adiw	r26, 0x0a	; 10
    136c:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1372:	16 8a       	std	Z+22, r1	; 0x16
    1374:	08 95       	ret

00001376 <TWI_SlaveReadHandler>:
 *  Handles TWI slave read transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveReadHandler(TWI_Slave_t *twi)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	fc 01       	movw	r30, r24
	/* Enable stop interrupt. */
	uint8_t currentCtrlA = twi->interface->SLAVE.CTRLA;
    137c:	a0 81       	ld	r26, Z
    137e:	b1 81       	ldd	r27, Z+1	; 0x01
    1380:	18 96       	adiw	r26, 0x08	; 8
    1382:	8c 91       	ld	r24, X
    1384:	18 97       	sbiw	r26, 0x08	; 8
	twi->interface->SLAVE.CTRLA = currentCtrlA | TWI_SLAVE_PIEN_bm;
    1386:	84 60       	ori	r24, 0x04	; 4
    1388:	18 96       	adiw	r26, 0x08	; 8
    138a:	8c 93       	st	X, r24

	/* If free space in buffer. */
	if (twi->bytesReceived < TWIS_RECEIVE_BUFFER_SIZE) {
    138c:	84 89       	ldd	r24, Z+20	; 0x14
    138e:	88 30       	cpi	r24, 0x08	; 8
    1390:	08 f5       	brcc	.+66     	; 0x13d4 <TWI_SlaveReadHandler+0x5e>
    1392:	ef 01       	movw	r28, r30
		/* Fetch data */
		uint8_t data = twi->interface->SLAVE.DATA;
    1394:	01 90       	ld	r0, Z+
    1396:	f0 81       	ld	r31, Z
    1398:	e0 2d       	mov	r30, r0
    139a:	84 85       	ldd	r24, Z+12	; 0x0c
		twi->receivedData[twi->bytesReceived] = data;
    139c:	9c 89       	ldd	r25, Y+20	; 0x14
    139e:	fe 01       	movw	r30, r28
    13a0:	e9 0f       	add	r30, r25
    13a2:	f1 1d       	adc	r31, r1
    13a4:	84 83       	std	Z+4, r24	; 0x04

		/* Process data. */
		twi->Process_Data();
    13a6:	ea 81       	ldd	r30, Y+2	; 0x02
    13a8:	fb 81       	ldd	r31, Y+3	; 0x03
    13aa:	09 95       	icall

		twi->bytesReceived++;
    13ac:	8c 89       	ldd	r24, Y+20	; 0x14
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	8c 8b       	std	Y+20, r24	; 0x14

		/* If application signalling need to abort (error occured),
		 * complete transaction and wait for next START. Otherwise
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
    13b2:	88 8d       	ldd	r24, Y+24	; 0x18
    13b4:	88 23       	and	r24, r24
    13b6:	49 f0       	breq	.+18     	; 0x13ca <TWI_SlaveReadHandler+0x54>
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    13b8:	e8 81       	ld	r30, Y
    13ba:	f9 81       	ldd	r31, Y+1	; 0x01
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	81 87       	std	Z+9, r24	; 0x09
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	8f 8b       	std	Y+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    13c4:	1e 8a       	std	Y+22, r1	; 0x16
		 * send ACK and wait for data interrupt.
		 */
		if (twi->abort) {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
			TWI_SlaveTransactionFinished(twi, TWIS_RESULT_ABORTED);
			twi->abort = false;
    13c6:	18 8e       	std	Y+24, r1	; 0x18
    13c8:	0d c0       	rjmp	.+26     	; 0x13e4 <TWI_SlaveReadHandler+0x6e>
		} else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    13ca:	e8 81       	ld	r30, Y
    13cc:	f9 81       	ldd	r31, Y+1	; 0x01
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	81 87       	std	Z+9, r24	; 0x09
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <TWI_SlaveReadHandler+0x6e>
	}
	/* If buffer overflow, send NACK and wait for next START. Set
	 * result buffer overflow.
	 */
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
    13d4:	a0 81       	ld	r26, Z
    13d6:	b1 81       	ldd	r27, Z+1	; 0x01
    13d8:	86 e0       	ldi	r24, 0x06	; 6
    13da:	19 96       	adiw	r26, 0x09	; 9
    13dc:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    13e2:	16 8a       	std	Z+22, r1	; 0x16
	else {
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_ACKACT_bm |
		                              TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_BUFFER_OVERFLOW);
	}
}
    13e4:	df 91       	pop	r29
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <TWI_SlaveWriteHandler>:
 *  Handles TWI slave write transactions and responses.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveWriteHandler(TWI_Slave_t *twi)
{
    13ea:	fc 01       	movw	r30, r24
	/* If NACK, slave write transaction finished. */
	if ((twi->bytesSent > 0) && (twi->interface->SLAVE.STATUS &
    13ec:	85 89       	ldd	r24, Z+21	; 0x15
    13ee:	88 23       	and	r24, r24
    13f0:	71 f0       	breq	.+28     	; 0x140e <TWI_SlaveWriteHandler+0x24>
    13f2:	a0 81       	ld	r26, Z
    13f4:	b1 81       	ldd	r27, Z+1	; 0x01
    13f6:	1a 96       	adiw	r26, 0x0a	; 10
    13f8:	8c 91       	ld	r24, X
    13fa:	1a 97       	sbiw	r26, 0x0a	; 10
    13fc:	84 ff       	sbrs	r24, 4
    13fe:	07 c0       	rjmp	.+14     	; 0x140e <TWI_SlaveWriteHandler+0x24>
	                             TWI_SLAVE_RXACK_bm)) {

		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	19 96       	adiw	r26, 0x09	; 9
    1404:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    140a:	16 8a       	std	Z+22, r1	; 0x16
    140c:	08 95       	ret
		twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
		TWI_SlaveTransactionFinished(twi, TWIS_RESULT_OK);
	}
	/* If ACK, master expects more data. */
	else {
		if (twi->bytesSent < TWIS_SEND_BUFFER_SIZE) {
    140e:	85 89       	ldd	r24, Z+21	; 0x15
    1410:	88 30       	cpi	r24, 0x08	; 8
    1412:	98 f4       	brcc	.+38     	; 0x143a <TWI_SlaveWriteHandler+0x50>
			uint8_t data = twi->sendData[twi->bytesSent];
    1414:	85 89       	ldd	r24, Z+21	; 0x15
    1416:	df 01       	movw	r26, r30
    1418:	a8 0f       	add	r26, r24
    141a:	b1 1d       	adc	r27, r1
    141c:	1c 96       	adiw	r26, 0x0c	; 12
    141e:	8c 91       	ld	r24, X
			twi->interface->SLAVE.DATA = data;
    1420:	a0 81       	ld	r26, Z
    1422:	b1 81       	ldd	r27, Z+1	; 0x01
    1424:	1c 96       	adiw	r26, 0x0c	; 12
    1426:	8c 93       	st	X, r24
			twi->bytesSent++;
    1428:	85 89       	ldd	r24, Z+21	; 0x15
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	85 8b       	std	Z+21, r24	; 0x15

			/* Send data, wait for data interrupt. */
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_RESPONSE_gc;
    142e:	01 90       	ld	r0, Z+
    1430:	f0 81       	ld	r31, Z
    1432:	e0 2d       	mov	r30, r0
    1434:	83 e0       	ldi	r24, 0x03	; 3
    1436:	81 87       	std	Z+9, r24	; 0x09
    1438:	08 95       	ret
		}
		/* If buffer overflow. */
		else {
			twi->interface->SLAVE.CTRLB = TWI_SLAVE_CMD_COMPTRANS_gc;
    143a:	a0 81       	ld	r26, Z
    143c:	b1 81       	ldd	r27, Z+1	; 0x01
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	19 96       	adiw	r26, 0x09	; 9
    1442:	8c 93       	st	X, r24
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    1444:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    1446:	16 8a       	std	Z+22, r1	; 0x16
    1448:	08 95       	ret

0000144a <TWI_SlaveDataHandler>:
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveDataHandler(TWI_Slave_t *twi)
{
	if (twi->interface->SLAVE.STATUS & TWI_SLAVE_DIR_bm) {
    144a:	dc 01       	movw	r26, r24
    144c:	ed 91       	ld	r30, X+
    144e:	fc 91       	ld	r31, X
    1450:	22 85       	ldd	r18, Z+10	; 0x0a
    1452:	21 ff       	sbrs	r18, 1
    1454:	03 c0       	rjmp	.+6      	; 0x145c <TWI_SlaveDataHandler+0x12>
		TWI_SlaveWriteHandler(twi);
    1456:	0e 94 f5 09 	call	0x13ea	; 0x13ea <TWI_SlaveWriteHandler>
    145a:	08 95       	ret
	} else {
		TWI_SlaveReadHandler(twi);
    145c:	0e 94 bb 09 	call	0x1376	; 0x1376 <TWI_SlaveReadHandler>
    1460:	08 95       	ret

00001462 <TWI_SlaveInterruptHandler>:
 *  data transmission, bus error and data collision.
 *
 *  \param twi The TWI_Slave_t struct instance.
 */
void TWI_SlaveInterruptHandler(TWI_Slave_t *twi)
{
    1462:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->SLAVE.STATUS;
    1464:	a0 81       	ld	r26, Z
    1466:	b1 81       	ldd	r27, Z+1	; 0x01
    1468:	1a 96       	adiw	r26, 0x0a	; 10
    146a:	8c 91       	ld	r24, X

	/* If bus error. */
	if (currentStatus & TWI_SLAVE_BUSERR_bm) {
    146c:	82 ff       	sbrs	r24, 2
    146e:	06 c0       	rjmp	.+12     	; 0x147c <TWI_SlaveInterruptHandler+0x1a>
		twi->bytesReceived = 0;
    1470:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    1472:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_BUS_ERROR;
    1474:	84 e0       	ldi	r24, 0x04	; 4
    1476:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
    1478:	16 8a       	std	Z+22, r1	; 0x16
    147a:	08 95       	ret
	}

	/* If transmit collision. */
	else if (currentStatus & TWI_SLAVE_COLL_bm) {
    147c:	83 ff       	sbrs	r24, 3
    147e:	06 c0       	rjmp	.+12     	; 0x148c <TWI_SlaveInterruptHandler+0x2a>
		twi->bytesReceived = 0;
    1480:	14 8a       	std	Z+20, r1	; 0x14
		twi->bytesSent = 0;
    1482:	15 8a       	std	Z+21, r1	; 0x15
		twi->result = TWIS_RESULT_TRANSMIT_COLLISION;
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	87 8b       	std	Z+23, r24	; 0x17
		twi->status = TWIS_STATUS_READY;
    1488:	16 8a       	std	Z+22, r1	; 0x16
    148a:	08 95       	ret
    148c:	28 2f       	mov	r18, r24
    148e:	20 74       	andi	r18, 0x40	; 64
	}

	/* If address match. */
	else if ((currentStatus & TWI_SLAVE_APIF_bm) &&
    1490:	98 2f       	mov	r25, r24
    1492:	91 74       	andi	r25, 0x41	; 65
    1494:	91 34       	cpi	r25, 0x41	; 65
    1496:	21 f4       	brne	.+8      	; 0x14a0 <TWI_SlaveInterruptHandler+0x3e>
	        (currentStatus & TWI_SLAVE_AP_bm)) {

		TWI_SlaveAddressMatchHandler(twi);
    1498:	cf 01       	movw	r24, r30
    149a:	0e 94 85 09 	call	0x130a	; 0x130a <TWI_SlaveAddressMatchHandler>
    149e:	08 95       	ret
	}

	/* If stop (only enabled through slave read transaction). */
	else if (currentStatus & TWI_SLAVE_APIF_bm) {
    14a0:	22 23       	and	r18, r18
    14a2:	21 f0       	breq	.+8      	; 0x14ac <TWI_SlaveInterruptHandler+0x4a>
		TWI_SlaveStopHandler(twi);
    14a4:	cf 01       	movw	r24, r30
    14a6:	0e 94 a6 09 	call	0x134c	; 0x134c <TWI_SlaveStopHandler>
    14aa:	08 95       	ret
	}

	/* If data interrupt. */
	else if (currentStatus & TWI_SLAVE_DIF_bm) {
    14ac:	88 23       	and	r24, r24
    14ae:	24 f4       	brge	.+8      	; 0x14b8 <TWI_SlaveInterruptHandler+0x56>
		TWI_SlaveDataHandler(twi);
    14b0:	cf 01       	movw	r24, r30
    14b2:	0e 94 25 0a 	call	0x144a	; 0x144a <TWI_SlaveDataHandler>
    14b6:	08 95       	ret
 *  \param twi    The TWI_Slave_t struct instance.
 *  \param result The result of the transaction.
 */
void TWI_SlaveTransactionFinished(TWI_Slave_t *twi, uint8_t result)
{
	twi->result = result;
    14b8:	85 e0       	ldi	r24, 0x05	; 5
    14ba:	87 8b       	std	Z+23, r24	; 0x17
	twi->status = TWIS_STATUS_READY;
    14bc:	16 8a       	std	Z+22, r1	; 0x16
    14be:	08 95       	ret

000014c0 <vregs_write>:
/**
 * Write a value to a virtual register.
 * Return: 0 is successful, 1 if failed
 */
int32_t vregs_write(uint32_t address, uint8_t data){
	if (address < VREGS_FILE_SIZE){
    14c0:	6f 3f       	cpi	r22, 0xFF	; 255
    14c2:	71 05       	cpc	r23, r1
    14c4:	81 05       	cpc	r24, r1
    14c6:	91 05       	cpc	r25, r1
    14c8:	09 f0       	breq	.+2      	; 0x14cc <vregs_write+0xc>
    14ca:	40 f4       	brcc	.+16     	; 0x14dc <vregs_write+0x1c>
		vregs[address] = data;
    14cc:	fb 01       	movw	r30, r22
    14ce:	e6 5b       	subi	r30, 0xB6	; 182
    14d0:	fa 4d       	sbci	r31, 0xDA	; 218
    14d2:	40 83       	st	Z, r20
		return 0;
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	cb 01       	movw	r24, r22
    14da:	08 95       	ret
	}
	else return 1;
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
}
    14e4:	08 95       	ret

000014e6 <vregs_read>:
 * Before you use this function, are you sure you want to do this?
 * It might be a bad idea ...
 * Return the value to be read
 */
uint8_t vregs_read(uint32_t address){
	if (address < VREGS_FILE_SIZE){
    14e6:	6f 3f       	cpi	r22, 0xFF	; 255
    14e8:	71 05       	cpc	r23, r1
    14ea:	81 05       	cpc	r24, r1
    14ec:	91 05       	cpc	r25, r1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <vregs_read+0xc>
    14f0:	28 f4       	brcc	.+10     	; 0x14fc <vregs_read+0x16>
		return vregs[address];
    14f2:	fb 01       	movw	r30, r22
    14f4:	e6 5b       	subi	r30, 0xB6	; 182
    14f6:	fa 4d       	sbci	r31, 0xDA	; 218
    14f8:	80 81       	ld	r24, Z
    14fa:	08 95       	ret
	}
	else return 0;
    14fc:	80 e0       	ldi	r24, 0x00	; 0
}
    14fe:	08 95       	ret

00001500 <vregs_read_buffer>:

/**
 * Same as vregs_read, but now read from the buffered vregs
 */
uint8_t vregs_read_buffer(uint32_t address){
	if (address < VREGS_FILE_SIZE){
    1500:	6f 3f       	cpi	r22, 0xFF	; 255
    1502:	71 05       	cpc	r23, r1
    1504:	81 05       	cpc	r24, r1
    1506:	91 05       	cpc	r25, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <vregs_read_buffer+0xc>
    150a:	a0 f4       	brcc	.+40     	; 0x1534 <vregs_read_buffer+0x34>
		return vregs_buffer[buffer_selector][address];
    150c:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <buffer_selector>
    1510:	f0 91 08 20 	lds	r31, 0x2008	; 0x802008 <buffer_selector+0x1>
    1514:	45 e0       	ldi	r20, 0x05	; 5
    1516:	51 e0       	ldi	r21, 0x01	; 1
    1518:	e4 9f       	mul	r30, r20
    151a:	90 01       	movw	r18, r0
    151c:	e5 9f       	mul	r30, r21
    151e:	30 0d       	add	r19, r0
    1520:	f4 9f       	mul	r31, r20
    1522:	30 0d       	add	r19, r0
    1524:	11 24       	eor	r1, r1
    1526:	2b 5b       	subi	r18, 0xBB	; 187
    1528:	3b 4d       	sbci	r19, 0xDB	; 219
    152a:	f9 01       	movw	r30, r18
    152c:	e6 0f       	add	r30, r22
    152e:	f7 1f       	adc	r31, r23
    1530:	80 81       	ld	r24, Z
    1532:	08 95       	ret
	}
	else return 0;
    1534:	80 e0       	ldi	r24, 0x00	; 0
}
    1536:	08 95       	ret

00001538 <vregs_writeout>:
 */
int32_t vregs_writeout(){
	int32_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs_buffer[!buffer_selector][cursor] = vregs[cursor];
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <buffer_selector>
    153e:	50 91 08 20 	lds	r21, 0x2008	; 0x802008 <buffer_selector+0x1>
    1542:	60 91 09 20 	lds	r22, 0x2009	; 0x802009 <buffer_selector+0x2>
    1546:	70 91 0a 20 	lds	r23, 0x200A	; 0x80200a <buffer_selector+0x3>
    154a:	45 2b       	or	r20, r21
    154c:	46 2b       	or	r20, r22
    154e:	47 2b       	or	r20, r23
    1550:	09 f0       	breq	.+2      	; 0x1554 <vregs_writeout+0x1c>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	ea e4       	ldi	r30, 0x4A	; 74
    1556:	f5 e2       	ldi	r31, 0x25	; 37
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	25 e0       	ldi	r18, 0x05	; 5
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	82 9f       	mul	r24, r18
    1560:	d0 01       	movw	r26, r0
    1562:	83 9f       	mul	r24, r19
    1564:	b0 0d       	add	r27, r0
    1566:	92 9f       	mul	r25, r18
    1568:	b0 0d       	add	r27, r0
    156a:	11 24       	eor	r1, r1
    156c:	ab 5b       	subi	r26, 0xBB	; 187
    156e:	bb 4d       	sbci	r27, 0xDB	; 219
    1570:	2f e4       	ldi	r18, 0x4F	; 79
    1572:	36 e2       	ldi	r19, 0x26	; 38
    1574:	81 91       	ld	r24, Z+
    1576:	8d 93       	st	X+, r24
 * and UART1
 */
int32_t vregs_writeout(){
	int32_t cursor;

	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
    1578:	e2 17       	cp	r30, r18
    157a:	f3 07       	cpc	r31, r19
    157c:	d9 f7       	brne	.-10     	; 0x1574 <vregs_writeout+0x3c>
	}

	/**
	 * BEGIN critical section
	 */
	cli();
    157e:	f8 94       	cli

	buffer_selector = !buffer_selector;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	40 91 07 20 	lds	r20, 0x2007	; 0x802007 <buffer_selector>
    158c:	50 91 08 20 	lds	r21, 0x2008	; 0x802008 <buffer_selector+0x1>
    1590:	60 91 09 20 	lds	r22, 0x2009	; 0x802009 <buffer_selector+0x2>
    1594:	70 91 0a 20 	lds	r23, 0x200A	; 0x80200a <buffer_selector+0x3>
    1598:	45 2b       	or	r20, r21
    159a:	46 2b       	or	r20, r22
    159c:	47 2b       	or	r20, r23
    159e:	19 f0       	breq	.+6      	; 0x15a6 <vregs_writeout+0x6e>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	dc 01       	movw	r26, r24
    15a6:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <buffer_selector>
    15aa:	90 93 08 20 	sts	0x2008, r25	; 0x802008 <buffer_selector+0x1>
    15ae:	a0 93 09 20 	sts	0x2009, r26	; 0x802009 <buffer_selector+0x2>
    15b2:	b0 93 0a 20 	sts	0x200A, r27	; 0x80200a <buffer_selector+0x3>

	sei();
    15b6:	78 94       	sei
	/**
	 * END critical section
	 */

	return 0;
}
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	cb 01       	movw	r24, r22
    15be:	08 95       	ret

000015c0 <vregs_init>:
static int32_t buffer_selector = 0;

/**
 * Initialise the virtual registers. Set all fields to their default values.
 */
void vregs_init(){
    15c0:	ea e4       	ldi	r30, 0x4A	; 74
    15c2:	f5 e2       	ldi	r31, 0x25	; 37
    15c4:	8f e4       	ldi	r24, 0x4F	; 79
    15c6:	96 e2       	ldi	r25, 0x26	; 38
	int32_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
		vregs[cursor] = 0;
    15c8:	11 92       	st	Z+, r1
 */
void vregs_init(){
	int32_t cursor;

	/* set everything to zero */
	for(cursor = 0; cursor < VREGS_FILE_TOTAL_SIZE; cursor++){
    15ca:	e8 17       	cp	r30, r24
    15cc:	f9 07       	cpc	r31, r25
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <vregs_init+0x8>
		vregs[cursor] = 0;
	}

	vregs[VREGS_ZEBROBUS_VERSION] = ZEBROBUS_VERSION;
    15d0:	ea e4       	ldi	r30, 0x4A	; 74
    15d2:	f5 e2       	ldi	r31, 0x25	; 37
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	80 83       	st	Z, r24
	vregs[VREGS_CLASS_ID] = CLASS_ID;
    15d8:	11 82       	std	Z+1, r1	; 0x01
	vregs[VREGS_PRODUCT_ID] = PRODUCT_ID;
    15da:	12 82       	std	Z+2, r1	; 0x02
	vregs[VREGS_PRODUCT_VERSION] = PRODUCT_VERSION;
    15dc:	13 82       	std	Z+3, r1	; 0x03
	vregs[VREGS_SERIAL_ID] = SERIAL_ID;
    15de:	14 82       	std	Z+4, r1	; 0x04
	vregs[VREGS_SOFTWARE_VERSION] = SOFTWARE_VERSION;
    15e0:	15 82       	std	Z+5, r1	; 0x05
	vregs[VREGS_FILE_TOTAL_SIZE - 1] = VREGS_SYNC_4;
    15e2:	8b e4       	ldi	r24, 0x4B	; 75
    15e4:	80 93 4e 26 	sts	0x264E, r24	; 0x80264e <vregs+0x104>
	vregs[VREGS_FILE_TOTAL_SIZE - 2] = VREGS_SYNC_3;
    15e8:	8a ee       	ldi	r24, 0xEA	; 234
    15ea:	80 93 4d 26 	sts	0x264D, r24	; 0x80264d <vregs+0x103>
	vregs[VREGS_FILE_TOTAL_SIZE - 3] = VREGS_SYNC_2;
    15ee:	82 e1       	ldi	r24, 0x12	; 18
    15f0:	80 93 4c 26 	sts	0x264C, r24	; 0x80264c <vregs+0x102>
	vregs[VREGS_FILE_TOTAL_SIZE - 4] = VREGS_SYNC_1;
    15f4:	85 e4       	ldi	r24, 0x45	; 69
    15f6:	80 93 4b 26 	sts	0x264B, r24	; 0x80264b <vregs+0x101>
	vregs[VREGS_FILE_TOTAL_SIZE - 5] = VREGS_SYNC_0;
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	80 93 4a 26 	sts	0x264A, r24	; 0x80264a <vregs+0x100>

	/* also initialise the buffers */
	vregs_writeout();
    1600:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vregs_writeout>
    1604:	08 95       	ret

00001606 <watchdog_init>:
#include "watchdog.h"

void watchdog_init(void)
{
	//configure 1s time out period
	WDT.CTRL |= (WDT_WPER0_bm | WDT_WPER1_bm | WDT_WPER2_bm | WDT_CEN_bm);
    1606:	e0 e8       	ldi	r30, 0x80	; 128
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8d 61       	ori	r24, 0x1D	; 29
    160e:	80 83       	st	Z, r24
	
	//enable watchdog timer
	WDT.CTRL |= (WDT_ENABLE_bm | WDT_CEN_bm);
    1610:	80 81       	ld	r24, Z
    1612:	83 60       	ori	r24, 0x03	; 3
    1614:	80 83       	st	Z, r24
    1616:	08 95       	ret

00001618 <zebro_alert_init>:
#include "zebro_alert.h"

//ZebroBus alerts
void zebro_alert_init(void)
{
	PORTC.DIRSET |= PIN7_bm;
    1618:	e0 e4       	ldi	r30, 0x40	; 64
    161a:	f6 e0       	ldi	r31, 0x06	; 6
    161c:	81 81       	ldd	r24, Z+1	; 0x01
    161e:	80 68       	ori	r24, 0x80	; 128
    1620:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET |= ~PIN7_bm;
    1622:	85 81       	ldd	r24, Z+5	; 0x05
    1624:	8f 67       	ori	r24, 0x7F	; 127
    1626:	85 83       	std	Z+5, r24	; 0x05
    1628:	08 95       	ret

0000162a <zebro_alert>:
}

void zebro_alert(void)
{
	PORTC.OUTSET |= PIN7_bm;
    162a:	e0 e4       	ldi	r30, 0x40	; 64
    162c:	f6 e0       	ldi	r31, 0x06	; 6
    162e:	85 81       	ldd	r24, Z+5	; 0x05
    1630:	80 68       	ori	r24, 0x80	; 128
    1632:	85 83       	std	Z+5, r24	; 0x05
    1634:	08 95       	ret

00001636 <_exit>:
    1636:	f8 94       	cli

00001638 <__stop_program>:
    1638:	ff cf       	rjmp	.-2      	; 0x1638 <__stop_program>
